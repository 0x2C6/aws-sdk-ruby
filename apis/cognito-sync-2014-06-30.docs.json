{
  "operations": {
    "DeleteDataset": "Deletes the specific dataset. The dataset will be deleted permanently, and the action can't be undone. Datasets that this dataset was merged with will no longer report the merge. Any consequent operation on this dataset will result in a ResourceNotFoundException.",
    "DescribeDataset": "Gets metadata about a dataset by identity and dataset name.",
    "DescribeIdentityPoolUsage": "Gets usage details (for example, data storage) about a particular identity pool.",
    "DescribeIdentityUsage": "Gets usage information for an identity, including number of datasets and data usage.",
    "ListDatasets": "Lists datasets for an identity.",
    "ListIdentityPoolUsage": "Gets a list of identity pools registered with Cognito.",
    "ListRecords": "Gets paginated records, optionally changed after a particular sync count for a dataset and identity.",
    "UpdateRecords": "Posts updates to records and add and delete records for a dataset and user."
  },
  "service": "<fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p>",
  "shapes": {
    "Boolean": {
      "base": null,
      "refs": {
        "ListRecordsResponse$DatasetExists": "Indicates whether the dataset exists.",
        "ListRecordsResponse$DatasetDeletedAfterRequestedSyncCount": "A boolean value specifying whether to delete the dataset locally."
      }
    },
    "ClientContext": {
      "base": null,
      "refs": {
        "UpdateRecordsRequest$ClientContext": null
      }
    },
    "Dataset": {
      "base": "A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.",
      "refs": {
        "DatasetList$member": null,
        "DeleteDatasetResponse$Dataset": "A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.",
        "DescribeDatasetResponse$Dataset": "Metadata for a collection of data for an identity. An identity can have multiple datasets. A dataset can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs."
      }
    },
    "DatasetList": {
      "base": null,
      "refs": {
        "ListDatasetsResponse$Datasets": "A set of datasets."
      }
    },
    "DatasetName": {
      "base": null,
      "refs": {
        "Dataset$DatasetName": "A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).",
        "DeleteDatasetRequest$DatasetName": "A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).",
        "DescribeDatasetRequest$DatasetName": "A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).",
        "ListRecordsRequest$DatasetName": "A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).",
        "UpdateRecordsRequest$DatasetName": "A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot)."
      }
    },
    "Date": {
      "base": null,
      "refs": {
        "Dataset$CreationDate": "Date.",
        "Dataset$LastModifiedDate": "Date when the dataset was last modified.",
        "IdentityPoolUsage$LastModifiedDate": "Date on which the identity pool was last modified.",
        "IdentityUsage$LastModifiedDate": "Date on which the identity was last modified.",
        "Record$LastModifiedDate": "The date on which the record was last modified.",
        "Record$DeviceLastModifiedDate": "The last modified date of the client device.",
        "RecordPatch$DeviceLastModifiedDate": "The last modified date of the client device."
      }
    },
    "DeleteDatasetRequest": {
      "base": "A request to delete the specific dataset.",
      "refs": {
      }
    },
    "DeleteDatasetResponse": {
      "base": "Response to a successful DeleteDataset request.",
      "refs": {
      }
    },
    "DescribeDatasetRequest": {
      "base": "A request for metadata about a dataset (creation date, number of records, size) by owner and dataset name.",
      "refs": {
      }
    },
    "DescribeDatasetResponse": {
      "base": "Response to a successful DescribeDataset request.",
      "refs": {
      }
    },
    "DescribeIdentityPoolUsageRequest": {
      "base": "A request for usage information about the identity pool.",
      "refs": {
      }
    },
    "DescribeIdentityPoolUsageResponse": {
      "base": "Response to a successful DescribeIdentityPoolUsage request.",
      "refs": {
      }
    },
    "DescribeIdentityUsageRequest": {
      "base": "A request for information about the usage of an identity pool.",
      "refs": {
      }
    },
    "DescribeIdentityUsageResponse": {
      "base": "The response to a successful DescribeIdentityUsage request.",
      "refs": {
      }
    },
    "ExceptionMessage": {
      "base": null,
      "refs": {
        "InternalErrorException$message": "Message returned by InternalErrorException.",
        "InvalidParameterException$message": "Message returned by InvalidParameterException.",
        "LimitExceededException$message": "Message returned by LimitExceededException.",
        "NotAuthorizedException$message": "The message returned by a NotAuthorizedException.",
        "ResourceConflictException$message": "The message returned by a ResourceConflictException.",
        "ResourceNotFoundException$message": "Message returned by a ResourceNotFoundException.",
        "TooManyRequestsException$message": "Message returned by a TooManyRequestsException."
      }
    },
    "IdentityId": {
      "base": null,
      "refs": {
        "Dataset$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "DeleteDatasetRequest$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "DescribeDatasetRequest$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "DescribeIdentityUsageRequest$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "IdentityUsage$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "ListDatasetsRequest$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "ListRecordsRequest$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "UpdateRecordsRequest$IdentityId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region."
      }
    },
    "IdentityPoolId": {
      "base": null,
      "refs": {
        "DeleteDatasetRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "DescribeDatasetRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "DescribeIdentityPoolUsageRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "DescribeIdentityUsageRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "IdentityPoolUsage$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "IdentityUsage$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "ListDatasetsRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "ListRecordsRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.",
        "UpdateRecordsRequest$IdentityPoolId": "A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region."
      }
    },
    "IdentityPoolUsage": {
      "base": "Usage information for the identity pool.",
      "refs": {
        "DescribeIdentityPoolUsageResponse$IdentityPoolUsage": "Information about the usage of the identity pool.",
        "IdentityPoolUsageList$member": null
      }
    },
    "IdentityPoolUsageList": {
      "base": null,
      "refs": {
        "ListIdentityPoolUsageResponse$IdentityPoolUsages": "Usage information for the identity pools."
      }
    },
    "IdentityUsage": {
      "base": "Usage information for the identity.",
      "refs": {
        "DescribeIdentityUsageResponse$IdentityUsage": "Usage information for the identity."
      }
    },
    "Integer": {
      "base": null,
      "refs": {
        "IdentityUsage$DatasetCount": "Number of datasets for the identity.",
        "ListDatasetsResponse$Count": "Number of datasets returned.",
        "ListIdentityPoolUsageResponse$MaxResults": "The maximum number of results to be returned.",
        "ListIdentityPoolUsageResponse$Count": "Total number of identities for the identity pool.",
        "ListRecordsResponse$Count": "Total number of records."
      }
    },
    "IntegerString": {
      "base": null,
      "refs": {
        "ListDatasetsRequest$MaxResults": "The maximum number of results to be returned.",
        "ListIdentityPoolUsageRequest$MaxResults": "The maximum number of results to be returned.",
        "ListRecordsRequest$MaxResults": "The maximum number of results to be returned."
      }
    },
    "InternalErrorException": {
      "base": "Indicates an internal service error.",
      "refs": {
      }
    },
    "InvalidParameterException": {
      "base": "Thrown when a request parameter does not comply with the associated constraints.",
      "refs": {
      }
    },
    "LimitExceededException": {
      "base": "Thrown when the limit on the number of objects or operations has been exceeded.",
      "refs": {
      }
    },
    "ListDatasetsRequest": {
      "base": "Request for a list of datasets for an identity.",
      "refs": {
      }
    },
    "ListDatasetsResponse": {
      "base": "Returned for a successful ListDatasets request.",
      "refs": {
      }
    },
    "ListIdentityPoolUsageRequest": {
      "base": "A request for usage information on an identity pool.",
      "refs": {
      }
    },
    "ListIdentityPoolUsageResponse": {
      "base": "Returned for a successful ListIdentityPoolUsage request.",
      "refs": {
      }
    },
    "ListRecordsRequest": {
      "base": "A request for a list of records.",
      "refs": {
      }
    },
    "ListRecordsResponse": {
      "base": "Returned for a successful ListRecordsRequest.",
      "refs": {
      }
    },
    "Long": {
      "base": null,
      "refs": {
        "Dataset$DataStorage": "Total size in bytes of the records in this dataset.",
        "Dataset$NumRecords": "Number of records in this dataset.",
        "IdentityPoolUsage$SyncSessionsCount": "Number of sync sessions for the identity pool.",
        "IdentityPoolUsage$DataStorage": "Data storage information for the identity pool.",
        "IdentityUsage$DataStorage": "Total data storage for this identity.",
        "ListRecordsRequest$LastSyncCount": "The last server sync count for this record.",
        "ListRecordsResponse$DatasetSyncCount": "Server sync count for this dataset.",
        "Record$SyncCount": "The server sync count for this record.",
        "RecordPatch$SyncCount": "Last known server sync count for this record. Set to 0 if unknown."
      }
    },
    "MergedDatasetNameList": {
      "base": null,
      "refs": {
        "ListRecordsResponse$MergedDatasetNames": "Names of merged datasets."
      }
    },
    "NotAuthorizedException": {
      "base": "Thrown when a user is not authorized to access the requested resource.",
      "refs": {
      }
    },
    "Operation": {
      "base": null,
      "refs": {
        "RecordPatch$Op": "An operation, either replace or remove."
      }
    },
    "Record": {
      "base": "The basic data structure of a dataset.",
      "refs": {
        "RecordList$member": null
      }
    },
    "RecordKey": {
      "base": null,
      "refs": {
        "Record$Key": "The key for the record.",
        "RecordPatch$Key": "The key associated with the record patch."
      }
    },
    "RecordList": {
      "base": null,
      "refs": {
        "ListRecordsResponse$Records": "A list of all records.",
        "UpdateRecordsResponse$Records": "A list of records that have been updated."
      }
    },
    "RecordPatch": {
      "base": "An update operation for a record.",
      "refs": {
        "RecordPatchList$member": null
      }
    },
    "RecordPatchList": {
      "base": null,
      "refs": {
        "UpdateRecordsRequest$RecordPatches": null
      }
    },
    "RecordValue": {
      "base": null,
      "refs": {
        "Record$Value": "The value for the record.",
        "RecordPatch$Value": "The value associated with the record patch."
      }
    },
    "ResourceConflictException": {
      "base": "Thrown if an update can't be applied because the resource was changed by another call and this would result in a conflict.",
      "refs": {
      }
    },
    "ResourceNotFoundException": {
      "base": "Thrown if the resource doesn't exist.",
      "refs": {
      }
    },
    "String": {
      "base": null,
      "refs": {
        "Dataset$LastModifiedBy": "The device that made the last change to this dataset.",
        "ListDatasetsRequest$NextToken": "A pagination token for obtaining the next page of results.",
        "ListDatasetsResponse$NextToken": "A pagination token for obtaining the next page of results.",
        "ListIdentityPoolUsageRequest$NextToken": "A pagination token for obtaining the next page of results.",
        "ListIdentityPoolUsageResponse$NextToken": "A pagination token for obtaining the next page of results.",
        "ListRecordsRequest$NextToken": "A pagination token for obtaining the next page of results.",
        "ListRecordsResponse$NextToken": "A pagination token for obtaining the next page of results.",
        "ListRecordsResponse$LastModifiedBy": null,
        "ListRecordsResponse$SyncSessionToken": "A token containing a session ID, identity ID, and expiration.",
        "MergedDatasetNameList$member": null,
        "Record$LastModifiedBy": "The user/device that made the last change to this record."
      }
    },
    "SyncSessionToken": {
      "base": null,
      "refs": {
        "ListRecordsRequest$SyncSessionToken": "A token containing a session ID, identity ID, and expiration.",
        "UpdateRecordsRequest$SyncSessionToken": "The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity."
      }
    },
    "TooManyRequestsException": {
      "base": "Thrown if the request is throttled.",
      "refs": {
      }
    },
    "UpdateRecordsRequest": {
      "base": "A request to post updates to records or add and delete records for a dataset and user.",
      "refs": {
      }
    },
    "UpdateRecordsResponse": {
      "base": "Returned for a successful UpdateRecordsRequest.",
      "refs": {
      }
    }
  }
}
