{
  "version": "2012-06-01",
  "endpoint": "elasticloadbalancing.%s.amazonaws.com",
  "metadata": {
    "result_wrapped": true,
    "service_full_name": "Elastic Load Balancing",
    "signature_version": "v4"
  },
  "plugins": [
    "Aws::Plugins::QuerySerializer"
  ],
  "documentation": "<fullname>Elastic Load Balancing</fullname> <p> Elastic Load Balancing is a cost-effective and easy to use web service to help you improve the availability and scalability of your application running on Amazon Elastic Cloud Compute (Amazon EC2). It makes it easy for you to distribute application loads between two or more EC2 instances. Elastic Load Balancing supports the growth in traffic of your application by enabling availability through redundancy. </p> <p>This guide provides detailed information about Elastic Load Balancing actions, data types, and parameters that can be used for sending a query request. Query requests are HTTP or HTTPS requests that use the HTTP verb GET or POST and a query parameter named Action or Operation. Action is used throughout this documentation, although Operation is supported for backward compatibility with other AWS Query APIs.</p> <p>For detailed information on constructing a query request using the actions, data types, and parameters mentioned in this guide, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/using-query-api.html\">Using the Query API</a> in the <i>Elastic Load Balancing Developer Guide</i>.</p> <p>For detailed information about Elastic Load Balancing features and their associated actions, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/UserScenarios.html\">Using Elastic Load Balancing</a> in the <i>Elastic Load Balancing Developer Guide</i>.</p> <p>This reference guide is based on the current WSDL, which is available at: <a href=\"http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/ElasticLoadBalancing.wsdl\"></a> </p>",
  "operations": {
    "apply_security_groups_to_load_balancer": {
      "name": "ApplySecurityGroupsToLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Associates one or more security groups with your LoadBalancer in VPC. The provided security group IDs will override any currently applied security groups. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the ApplySecurityGroupsToLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "security_groups": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of security group IDs to associate with your LoadBalancer in VPC. The security group IDs must be provided as the ID and not the security group name (For example, sg-1234). </p>",
            "serialized_name": "SecurityGroups",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The out for the ApplySecurityGroupsToLoadBalancer action. </p>",
        "members": {
          "security_groups": {
            "type": "list",
            "documentation": "<p> A list of security group IDs associated with your LoadBalancer. </p>",
            "serialized_name": "SecurityGroups",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more specified security groups do not exist. </p>",
          "members": {
          }
        }
      ]
    },
    "attach_load_balancer_to_subnets": {
      "name": "AttachLoadBalancerToSubnets",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Adds one or more subnets to the set of configured subnets in the VPC for the LoadBalancer. </p> <p> The Loadbalancers evenly distribute requests across all of the registered subnets. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the AttachLoadBalancerToSubnets action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "subnets": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of subnet IDs to add for the LoadBalancer. </p>",
            "serialized_name": "Subnets",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the AttachLoadBalancerToSubnets action. </p>",
        "members": {
          "subnets": {
            "type": "list",
            "documentation": "<p> A list of subnet IDs added for the LoadBalancer. </p>",
            "serialized_name": "Subnets",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more subnets were not found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The VPC has no Internet gateway. </p>",
          "members": {
          }
        }
      ]
    },
    "configure_health_check": {
      "name": "ConfigureHealthCheck",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Enables the client to define an application healthcheck for the instances. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> Input for the ConfigureHealthCheck action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The mnemonic name associated with the LoadBalancer. This name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "health_check": {
            "type": "structure",
            "required": true,
            "documentation": "<p> A structure containing the configuration information for the new healthcheck. </p>",
            "serialized_name": "HealthCheck",
            "members": {
              "target": {
                "type": "string",
                "required": true,
                "documentation": "<p> Specifies the instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535. </p> <p> TCP is the default, specified as a TCP: port pair, for example \"TCP:5000\". In this case a healthcheck simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy. </p> <p>SSL is also specified as SSL: port pair, for example, SSL:5000.</p> <p> For HTTP or HTTPS protocol, the situation is different. You have to include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example \"HTTP:80/weather/us/wa/seattle\". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than \"200 OK\" within the timeout period is considered unhealthy. </p> <p> The total length of the HTTP ping target needs to be 1024 16-bit Unicode characters or less. </p>",
                "serialized_name": "Target"
              },
              "interval": {
                "type": "integer",
                "required": true,
                "documentation": "<p> Specifies the approximate interval, in seconds, between health checks of an individual instance. </p>",
                "serialized_name": "Interval"
              },
              "timeout": {
                "type": "integer",
                "required": true,
                "documentation": "<p> Specifies the amount of time, in seconds, during which no response means a failed health probe. </p> This value must be less than the <i>Interval</i> value.",
                "serialized_name": "Timeout"
              },
              "unhealthy_threshold": {
                "type": "integer",
                "required": true,
                "documentation": "<p> Specifies the number of consecutive health probe failures required before moving the instance to the <i>Unhealthy</i> state. </p>",
                "serialized_name": "UnhealthyThreshold"
              },
              "healthy_threshold": {
                "type": "integer",
                "required": true,
                "documentation": "<p> Specifies the number of consecutive health probe successes required before moving the instance to the <i>Healthy</i> state. </p>",
                "serialized_name": "HealthyThreshold"
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the ConfigureHealthCheck action. </p>",
        "members": {
          "health_check": {
            "type": "structure",
            "documentation": "<p> The updated healthcheck for the instances. </p>",
            "serialized_name": "HealthCheck",
            "members": {
              "target": {
                "type": "string",
                "documentation": "<p> Specifies the instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535. </p> <p> TCP is the default, specified as a TCP: port pair, for example \"TCP:5000\". In this case a healthcheck simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy. </p> <p>SSL is also specified as SSL: port pair, for example, SSL:5000.</p> <p> For HTTP or HTTPS protocol, the situation is different. You have to include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example \"HTTP:80/weather/us/wa/seattle\". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than \"200 OK\" within the timeout period is considered unhealthy. </p> <p> The total length of the HTTP ping target needs to be 1024 16-bit Unicode characters or less. </p>",
                "serialized_name": "Target"
              },
              "interval": {
                "type": "integer",
                "documentation": "<p> Specifies the approximate interval, in seconds, between health checks of an individual instance. </p>",
                "serialized_name": "Interval"
              },
              "timeout": {
                "type": "integer",
                "documentation": "<p> Specifies the amount of time, in seconds, during which no response means a failed health probe. </p> This value must be less than the <i>Interval</i> value.",
                "serialized_name": "Timeout"
              },
              "unhealthy_threshold": {
                "type": "integer",
                "documentation": "<p> Specifies the number of consecutive health probe failures required before moving the instance to the <i>Unhealthy</i> state. </p>",
                "serialized_name": "UnhealthyThreshold"
              },
              "healthy_threshold": {
                "type": "integer",
                "documentation": "<p> Specifies the number of consecutive health probe successes required before moving the instance to the <i>Healthy</i> state. </p>",
                "serialized_name": "HealthyThreshold"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        }
      ]
    },
    "create_app_cookie_stickiness_policy": {
      "name": "CreateAppCookieStickinessPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners. </p> <p> This policy is similar to the policy created by CreateLBCookieStickinessPolicy, except that the lifetime of the special Elastic Load Balancing cookie follows the lifetime of the application-generated cookie specified in the policy configuration. The LoadBalancer only inserts a new stickiness cookie when the application response includes a new application cookie. </p> <p> If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued. </p> An application client must receive and send two cookies: the application-generated cookie and the special Elastic Load Balancing cookie named <code>AWSELB</code>. This is the default behavior for many common web browsers. <p>For information on using CreateAppCookieStickinessPolicy, see <i>Using the Query API</i> in the <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/US_StickySessions.html#US_EnableStickySessionsAppCookies\">Enabling Application-Controlled Sesssion Stickiness</a> section of the <i>Elastic Load Balancing Developer Guide</i>.</p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the CreateAppCookieStickinessPolicy action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name of the policy being created. The name must be unique within the set of policies for this LoadBalancer. </p>",
            "serialized_name": "PolicyName"
          },
          "cookie_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> Name of the application cookie used for stickiness. </p>",
            "serialized_name": "CookieName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the CreateAppCookieStickinessPolicy action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Policy with the same name exists for this LoadBalancer. Please choose another name. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Quota for number of policies for this LoadBalancer has already been reached. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "create_lb_cookie_stickiness_policy": {
      "name": "CreateLBCookieStickinessPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners. </p> <p> When a LoadBalancer implements this policy, the LoadBalancer uses a special cookie to track the backend server instance for each request. When the LoadBalancer receives a request, it first checks to see if this cookie is present in the request. If so, the LoadBalancer sends the request to the application server specified in the cookie. If not, the LoadBalancer sends the request to a server that is chosen based on the existing load balancing algorithm. </p> <p> A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration. </p> <p>For information on using CreateLBCookieStickinessPolicy, see <i>Using the Query API</i> in the <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/US_StickySessions.html#US_EnableStickySessionsLBCookies\">Enabling Duration-Based Sesssion Stickiness</a> section of the <i>Elastic Load Balancing Developer Guide</i>.</p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the CreateLBCookieStickinessPolicy action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name of the policy being created. The name must be unique within the set of policies for this LoadBalancer. </p>",
            "serialized_name": "PolicyName"
          },
          "cookie_expiration_period": {
            "type": "integer",
            "documentation": "<p> The time period in seconds after which the cookie should be considered stale. Not specifying this parameter indicates that the sticky session will last for the duration of the browser session. </p>",
            "serialized_name": "CookieExpirationPeriod"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the CreateLBCookieStickinessPolicy action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Policy with the same name exists for this LoadBalancer. Please choose another name. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Quota for number of policies for this LoadBalancer has already been reached. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "create_load_balancer": {
      "name": "CreateLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Creates a new LoadBalancer. </p> <p> After the call has completed successfully, a new LoadBalancer is created; however, it will not be usable until at least one instance has been registered. When the LoadBalancer creation is completed, the client can check whether or not it is usable by using the DescribeInstanceHealth action. The LoadBalancer is usable as soon as any registered instance is <i>InService</i>. </p> Currently, the client's quota of LoadBalancers is limited to ten per Region. <p> LoadBalancer DNS names vary depending on the Region they're created in. For LoadBalancers created in the United States, the DNS name ends with: </p> <ul> <li> <i>us-east-1.elb.amazonaws.com</i> (for the Northern Virginia Region) </li> <li> <i>us-west-1.elb.amazonaws.com</i> (for the Northern California Region) </li> </ul> <p> For LoadBalancers created in the EU (Ireland) Region, the DNS name ends with: </p> <ul> <li> <i>eu-west-1.elb.amazonaws.com</i> </li> </ul> <p>For information on using CreateLoadBalancer to create a new LoadBalancer in Amazon EC2, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/creating_lb_QueryAPI.html\">Using Query API</a> section in the <i>Creating a Load Balancer With SSL Cipher Settings and Back-end Authentication</i> topic of the <i>Elastic Load Balancing Developer Guide</i>.</p> <p>For information on using CreateLoadBalancer to create a new LoadBalancer in Amazon VPC, see <i>Using the Query API</i> in the <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/USVPC_creating_basic_lb.html\">Creating a Basic Load Balancer in Amazon VPC</a> section in the <i>Elastic Load Balancing Developer Guide</i>.</p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the CreateLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within your set of LoadBalancers. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "listeners": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of the following tuples: LoadBalancerPort, InstancePort, and Protocol. </p>",
            "serialized_name": "Listeners",
            "members": {
              "type": "structure",
              "documentation": "<p> The Listener data type. </p>",
              "members": {
                "protocol": {
                  "type": "string",
                  "required": true,
                  "documentation": "<p> Specifies the LoadBalancer transport protocol to use for routing - HTTP, HTTPS, TCP or SSL. This property cannot be modified for the life of the LoadBalancer. </p>",
                  "serialized_name": "Protocol"
                },
                "load_balancer_port": {
                  "type": "integer",
                  "required": true,
                  "documentation": "<p> Specifies the external LoadBalancer port number. This property cannot be modified for the life of the LoadBalancer. </p>",
                  "serialized_name": "LoadBalancerPort"
                },
                "instance_protocol": {
                  "type": "string",
                  "documentation": "<p> Specifies the protocol to use for routing traffic to back-end instances - HTTP, HTTPS, TCP, or SSL. This property cannot be modified for the life of the LoadBalancer. </p> If the front-end protocol is HTTP or HTTPS, <code>InstanceProtocol</code> has to be at the same protocol layer, i.e., HTTP or HTTPS. Likewise, if the front-end protocol is TCP or SSL, InstanceProtocol has to be TCP or SSL. If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is secure, i.e., HTTPS or SSL, the listener's <code>InstanceProtocol</code> has to be secure, i.e., HTTPS or SSL. If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is HTTP or TCP, the listener's <code>InstanceProtocol</code> must be either HTTP or TCP.",
                  "serialized_name": "InstanceProtocol"
                },
                "instance_port": {
                  "type": "integer",
                  "required": true,
                  "documentation": "<p> Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the LoadBalancer. </p>",
                  "serialized_name": "InstancePort"
                },
                "ssl_certificate_id": {
                  "type": "string",
                  "documentation": "<p> The ARN string of the server certificate. To get the ARN of the server certificate, call the AWS Identity and Access Management <a href=\"http://docs.aws.amazon.com/IAM/latest/APIReference/index.html?API_UploadServerCertificate.html\">UploadServerCertificate </a> API. </p>",
                  "serialized_name": "SSLCertificateId"
                }
              }
            }
          },
          "availability_zones": {
            "type": "list",
            "documentation": "<p> A list of Availability Zones. </p> <p> At least one Availability Zone must be specified. Specified Availability Zones must be in the same EC2 Region as the LoadBalancer. Traffic will be equally distributed across all zones. </p> <p> This list can be modified after the creation of the LoadBalancer by calling EnableAvailabilityZonesForLoadBalancer. </p>",
            "serialized_name": "AvailabilityZones",
            "members": {
              "type": "string"
            }
          },
          "subnets": {
            "type": "list",
            "documentation": "<p> A list of subnet IDs in your VPC to attach to your LoadBalancer. </p>",
            "serialized_name": "Subnets",
            "members": {
              "type": "string"
            }
          },
          "security_groups": {
            "type": "list",
            "documentation": "<p> The security groups assigned to your LoadBalancer within your VPC. </p>",
            "serialized_name": "SecurityGroups",
            "members": {
              "type": "string"
            }
          },
          "scheme": {
            "type": "string",
            "documentation": "<p>The type of a LoadBalancer. </p> <p>By default, Elastic Load Balancing creates an Internet-facing LoadBalancer with a publicly resolvable DNS name, which resolves to public IP addresses. </p> <p>Specify the value <code>internal</code> for this option to create an internal LoadBalancer with a DNS name that resolves to private IP addresses.</p> <p>This option is only available for LoadBalancers attached to an Amazon VPC.</p>",
            "serialized_name": "Scheme"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the CreateLoadBalancer action. </p>",
        "members": {
          "dns_name": {
            "type": "string",
            "documentation": "<p> The DNS name for the LoadBalancer. </p>",
            "serialized_name": "DNSName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> LoadBalancer name already exists for this account. Please choose another name. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The quota for the number of LoadBalancers has already been reached. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The specified SSL ID does not refer to a valid SSL certificate in the AWS Identity and Access Management Service. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more subnets were not found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The VPC has no Internet gateway. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more specified security groups do not exist. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Invalid value for scheme. Scheme can only be specified for load balancers in VPC. </p>",
          "members": {
          }
        }
      ]
    },
    "create_load_balancer_listeners": {
      "name": "CreateLoadBalancerListeners",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Creates one or more listeners on a LoadBalancer for the specified port. If a listener with the given port does not already exist, it will be created; otherwise, the properties of the new listener must match the properties of the existing listener. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the CreateLoadBalancerListeners action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name of the LoadBalancer. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "listeners": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of <code>LoadBalancerPort</code>, <code>InstancePort</code>, <code>Protocol</code>, and <code>SSLCertificateId</code> items. </p>",
            "serialized_name": "Listeners",
            "members": {
              "type": "structure",
              "documentation": "<p> The Listener data type. </p>",
              "members": {
                "protocol": {
                  "type": "string",
                  "required": true,
                  "documentation": "<p> Specifies the LoadBalancer transport protocol to use for routing - HTTP, HTTPS, TCP or SSL. This property cannot be modified for the life of the LoadBalancer. </p>",
                  "serialized_name": "Protocol"
                },
                "load_balancer_port": {
                  "type": "integer",
                  "required": true,
                  "documentation": "<p> Specifies the external LoadBalancer port number. This property cannot be modified for the life of the LoadBalancer. </p>",
                  "serialized_name": "LoadBalancerPort"
                },
                "instance_protocol": {
                  "type": "string",
                  "documentation": "<p> Specifies the protocol to use for routing traffic to back-end instances - HTTP, HTTPS, TCP, or SSL. This property cannot be modified for the life of the LoadBalancer. </p> If the front-end protocol is HTTP or HTTPS, <code>InstanceProtocol</code> has to be at the same protocol layer, i.e., HTTP or HTTPS. Likewise, if the front-end protocol is TCP or SSL, InstanceProtocol has to be TCP or SSL. If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is secure, i.e., HTTPS or SSL, the listener's <code>InstanceProtocol</code> has to be secure, i.e., HTTPS or SSL. If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is HTTP or TCP, the listener's <code>InstanceProtocol</code> must be either HTTP or TCP.",
                  "serialized_name": "InstanceProtocol"
                },
                "instance_port": {
                  "type": "integer",
                  "required": true,
                  "documentation": "<p> Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the LoadBalancer. </p>",
                  "serialized_name": "InstancePort"
                },
                "ssl_certificate_id": {
                  "type": "string",
                  "documentation": "<p> The ARN string of the server certificate. To get the ARN of the server certificate, call the AWS Identity and Access Management <a href=\"http://docs.aws.amazon.com/IAM/latest/APIReference/index.html?API_UploadServerCertificate.html\">UploadServerCertificate </a> API. </p>",
                  "serialized_name": "SSLCertificateId"
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the CreateLoadBalancerListeners action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> A <code>Listener</code> already exists for the given <code>LoadBalancerName</code> and <code>LoadBalancerPort</code>, but with a different <code>InstancePort</code>, <code>Protocol</code>, or <code>SSLCertificateId</code>. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The specified SSL ID does not refer to a valid SSL certificate in the AWS Identity and Access Management Service. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "create_load_balancer_policy": {
      "name": "CreateLoadBalancerPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Creates a new policy that contains the necessary attributes depending on the policy type. Policies are settings that are saved for your Elastic LoadBalancer and that can be applied to the front-end listener, or the back-end application server, depending on your policy type. </p>",
      "input": {
        "type": "structure",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer for which the policy is being created. This name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name of the LoadBalancer policy being created. The name must be unique within the set of policies for this LoadBalancer. </p>",
            "serialized_name": "PolicyName"
          },
          "policy_type_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name of the base policy type being used to create this policy. To get the list of policy types, use the DescribeLoadBalancerPolicyTypes action. </p>",
            "serialized_name": "PolicyTypeName"
          },
          "policy_attributes": {
            "type": "list",
            "documentation": "<p> A list of attributes associated with the policy being created. </p>",
            "serialized_name": "PolicyAttributes",
            "members": {
              "type": "structure",
              "documentation": "<p> The PolicyAttribute data type. This data type contains a key/value pair that defines properties of a specific policy. </p>",
              "members": {
                "attribute_name": {
                  "type": "string",
                  "documentation": "<p> The name of the attribute associated with the policy. </p>",
                  "serialized_name": "AttributeName"
                },
                "attribute_value": {
                  "type": "string",
                  "documentation": "<p> The value of the attribute associated with the policy. </p>",
                  "serialized_name": "AttributeValue"
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>The output for the CreateLoadBalancerPolicy action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more of the specified policy types do not exist. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Policy with the same name exists for this LoadBalancer. Please choose another name. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Quota for number of policies for this LoadBalancer has already been reached. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "delete_load_balancer": {
      "name": "DeleteLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Deletes the specified LoadBalancer. </p> <p> If attempting to recreate the LoadBalancer, the client must reconfigure all the settings. The DNS name associated with a deleted LoadBalancer will no longer be usable. Once deleted, the name and associated DNS record of the LoadBalancer no longer exist and traffic sent to any of its IP addresses will no longer be delivered to client instances. The client will not receive the same DNS name even if a new LoadBalancer with same LoadBalancerName is created. </p> <p> To successfully call this API, the client must provide the same account credentials as were used to create the LoadBalancer. </p> By design, if the LoadBalancer does not exist or has already been deleted, DeleteLoadBalancer still succeeds.",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DeleteLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DeleteLoadBalancer action. </p>",
        "members": {
        }
      }
    },
    "delete_load_balancer_listeners": {
      "name": "DeleteLoadBalancerListeners",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Deletes listeners from the LoadBalancer for the specified port. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DeleteLoadBalancerListeners action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The mnemonic name associated with the LoadBalancer. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "load_balancer_ports": {
            "type": "list",
            "required": true,
            "documentation": "<p> The client port number(s) of the LoadBalancerListener(s) to be removed. </p>",
            "serialized_name": "LoadBalancerPorts",
            "members": {
              "type": "integer"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DeleteLoadBalancerListeners action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        }
      ]
    },
    "delete_load_balancer_policy": {
      "name": "DeleteLoadBalancerPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Deletes a policy from the LoadBalancer. The specified policy must not be enabled for any listeners. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DeleteLoadBalancerPolicy action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The mnemonic name associated with the LoadBalancer. The name must be unique within your AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The mnemonic name for the policy being deleted. </p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DeleteLoadBalancerPolicy action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "deregister_instances_from_load_balancer": {
      "name": "DeregisterInstancesFromLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Deregisters instances from the LoadBalancer. Once the instance is deregistered, it will stop receiving traffic from the LoadBalancer. </p> <p> In order to successfully call this API, the same account credentials as those used to create the LoadBalancer must be provided. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DeregisterInstancesFromLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "instances": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of EC2 instance IDs consisting of all instances to be deregistered. </p>",
            "serialized_name": "Instances",
            "members": {
              "type": "structure",
              "documentation": "<p> The Instance data type. </p>",
              "members": {
                "instance_id": {
                  "type": "string",
                  "documentation": "<p> Provides an EC2 instance ID. </p>",
                  "serialized_name": "InstanceId"
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DeregisterInstancesFromLoadBalancer action. </p>",
        "members": {
          "instances": {
            "type": "list",
            "documentation": "<p> An updated list of remaining instances registered with the LoadBalancer. </p>",
            "serialized_name": "Instances",
            "members": {
              "type": "structure",
              "documentation": "<p> The Instance data type. </p>",
              "members": {
                "instance_id": {
                  "type": "string",
                  "documentation": "<p> Provides an EC2 instance ID. </p>",
                  "serialized_name": "InstanceId"
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The specified EndPoint is not valid. </p>",
          "members": {
          }
        }
      ]
    },
    "describe_instance_health": {
      "name": "DescribeInstanceHealth",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Returns the current state of the instances of the specified LoadBalancer. If no instances are specified, the state of all the instances for the LoadBalancer is returned. </p> The client must have created the specified input LoadBalancer in order to retrieve this information; the client must provide the same account credentials as those that were used to create the LoadBalancer.",
      "input": {
        "type": "structure",
        "documentation": "<p> Returns the current state of the instances of the specified LoadBalancer. If no instances are specified, the state of all the instances for the LoadBalancer is returned. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "instances": {
            "type": "list",
            "documentation": "<p> A list of instance IDs whose states are being queried. </p>",
            "serialized_name": "Instances",
            "members": {
              "type": "structure",
              "documentation": "<p> The Instance data type. </p>",
              "members": {
                "instance_id": {
                  "type": "string",
                  "documentation": "<p> Provides an EC2 instance ID. </p>",
                  "serialized_name": "InstanceId"
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DescribeInstanceHealth action. </p>",
        "members": {
          "instance_states": {
            "type": "list",
            "documentation": "<p> A list containing health information for the specified instances. </p>",
            "serialized_name": "InstanceStates",
            "members": {
              "type": "structure",
              "documentation": "<p> The InstanceState data type. </p>",
              "members": {
                "instance_id": {
                  "type": "string",
                  "documentation": "<p> Provides an EC2 instance ID. </p>",
                  "serialized_name": "InstanceId"
                },
                "state": {
                  "type": "string",
                  "documentation": "<p> Specifies the current state of the instance. Valid value: InService|OutOfService </p>",
                  "serialized_name": "State"
                },
                "reason_code": {
                  "type": "string",
                  "documentation": "<p> Provides information about the cause of <i>OutOfService</i> instances. Specifically, it indicates whether the cause is Elastic Load Balancing or the instance behind the LoadBalancer. </p>",
                  "serialized_name": "ReasonCode"
                },
                "description": {
                  "type": "string",
                  "documentation": "<p> Provides a description of the instance state. </p>",
                  "serialized_name": "Description"
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The specified EndPoint is not valid. </p>",
          "members": {
          }
        }
      ]
    },
    "describe_load_balancer_policies": {
      "name": "DescribeLoadBalancerPolicies",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Returns detailed descriptions of the policies. If you specify a LoadBalancer name, the operation returns either the descriptions of the specified policies, or descriptions of all the policies created for the LoadBalancer. If you don't specify a LoadBalancer name, the operation returns descriptions of the specified sample policies, or descriptions of all the sample policies. The names of the sample policies have the <code>ELBSample-</code> prefix. </p>",
      "input": {
        "type": "structure",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "documentation": "<p> The mnemonic name associated with the LoadBalancer. If no name is specified, the operation returns the attributes of either all the sample policies pre-defined by Elastic Load Balancing or the specified sample polices. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "policy_names": {
            "type": "list",
            "documentation": "<p> The names of LoadBalancer policies you've created or Elastic Load Balancing sample policy names. </p>",
            "serialized_name": "PolicyNames",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>The output for the DescribeLoadBalancerPolicies action. </p>",
        "members": {
          "policy_descriptions": {
            "type": "list",
            "documentation": "<p> A list of policy description structures. </p>",
            "serialized_name": "PolicyDescriptions",
            "members": {
              "type": "structure",
              "documentation": "<p> The <code>PolicyDescription</code> data type. </p>",
              "members": {
                "policy_name": {
                  "type": "string",
                  "documentation": "<p> The name mof the policy associated with the LoadBalancer. </p>",
                  "serialized_name": "PolicyName"
                },
                "policy_type_name": {
                  "type": "string",
                  "documentation": "<p> The name of the policy type associated with the LoadBalancer. </p>",
                  "serialized_name": "PolicyTypeName"
                },
                "policy_attribute_descriptions": {
                  "type": "list",
                  "documentation": "<p> A list of policy attribute description structures. </p>",
                  "serialized_name": "PolicyAttributeDescriptions",
                  "members": {
                    "type": "structure",
                    "documentation": "<p> The <code>PolicyAttributeDescription</code> data type. This data type is used to describe the attributes and values associated with a policy. </p>",
                    "members": {
                      "attribute_name": {
                        "type": "string",
                        "documentation": "<p> The name of the attribute associated with the policy. </p>",
                        "serialized_name": "AttributeName"
                      },
                      "attribute_value": {
                        "type": "string",
                        "documentation": "<p> The value of the attribute associated with the policy. </p>",
                        "serialized_name": "AttributeValue"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more specified policies were not found. </p>",
          "members": {
          }
        }
      ]
    },
    "describe_load_balancer_policy_types": {
      "name": "DescribeLoadBalancerPolicyTypes",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Returns meta-information on the specified LoadBalancer policies defined by the Elastic Load Balancing service. The policy types that are returned from this action can be used in a CreateLoadBalancerPolicy action to instantiate specific policy configurations that will be applied to an Elastic LoadBalancer. </p>",
      "input": {
        "type": "structure",
        "members": {
          "policy_type_names": {
            "type": "list",
            "documentation": "<p> Specifies the name of the policy types. If no names are specified, returns the description of all the policy types defined by Elastic Load Balancing service. </p>",
            "serialized_name": "PolicyTypeNames",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DescribeLoadBalancerPolicyTypes action. </p>",
        "members": {
          "policy_type_descriptions": {
            "type": "list",
            "documentation": "<p> List of policy type description structures of the specified policy type. If no policy type names are specified, returns the description of all the policy types defined by Elastic Load Balancing service. </p>",
            "serialized_name": "PolicyTypeDescriptions",
            "members": {
              "type": "structure",
              "documentation": "<p> The PolicyTypeDescription data type. </p>",
              "members": {
                "policy_type_name": {
                  "type": "string",
                  "documentation": "<p> The name of the policy type. </p>",
                  "serialized_name": "PolicyTypeName"
                },
                "description": {
                  "type": "string",
                  "documentation": "<p> A human-readable description of the policy type. </p>",
                  "serialized_name": "Description"
                },
                "policy_attribute_type_descriptions": {
                  "type": "list",
                  "documentation": "<p> The description of the policy attributes associated with the LoadBalancer policies defined by the Elastic Load Balancing service. </p>",
                  "serialized_name": "PolicyAttributeTypeDescriptions",
                  "members": {
                    "type": "structure",
                    "documentation": "<p> The <code>PolicyAttributeTypeDescription</code> data type. This data type is used to describe values that are acceptable for the policy attribute. </p>",
                    "members": {
                      "attribute_name": {
                        "type": "string",
                        "documentation": "<p> The name of the attribute associated with the policy type. </p>",
                        "serialized_name": "AttributeName"
                      },
                      "attribute_type": {
                        "type": "string",
                        "documentation": "<p> The type of attribute. For example, Boolean, Integer, etc. </p>",
                        "serialized_name": "AttributeType"
                      },
                      "description": {
                        "type": "string",
                        "documentation": "<p> A human-readable description of the attribute. </p>",
                        "serialized_name": "Description"
                      },
                      "default_value": {
                        "type": "string",
                        "documentation": "<p> The default value of the attribute, if applicable. </p>",
                        "serialized_name": "DefaultValue"
                      },
                      "cardinality": {
                        "type": "string",
                        "documentation": "<p> The cardinality of the attribute. Valid Values: <ul> <li>ONE(1) : Single value required</li> <li>ZERO_OR_ONE(0..1) : Up to one value can be supplied</li> <li>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</li> <li>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</li> </ul> </p>",
                        "serialized_name": "Cardinality"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> One or more of the specified policy types do not exist. </p>",
          "members": {
          }
        }
      ]
    },
    "describe_load_balancers": {
      "name": "DescribeLoadBalancers",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Returns detailed configuration information for the specified LoadBalancers. If no LoadBalancers are specified, the operation returns configuration information for all LoadBalancers created by the caller. </p> The client must have created the specified input LoadBalancers in order to retrieve this information; the client must provide the same account credentials as those that were used to create the LoadBalancer.",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DescribeLoadBalancers action. </p>",
        "members": {
          "load_balancer_names": {
            "type": "list",
            "documentation": "<p> A list of names associated with the LoadBalancers at creation time. </p>",
            "serialized_name": "LoadBalancerNames",
            "members": {
              "type": "string"
            }
          },
          "marker": {
            "type": "string",
            "documentation": "<p> An optional parameter reserved for future use. </p>",
            "serialized_name": "Marker"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DescribeLoadBalancers action. </p>",
        "members": {
          "load_balancer_descriptions": {
            "type": "list",
            "documentation": "<p> A list of LoadBalancer description structures. </p>",
            "serialized_name": "LoadBalancerDescriptions",
            "members": {
              "type": "structure",
              "documentation": "<p> Contains the result of a successful invocation of DescribeLoadBalancers. </p>",
              "members": {
                "load_balancer_name": {
                  "type": "string",
                  "documentation": "<p> Specifies the name associated with the LoadBalancer. </p>",
                  "serialized_name": "LoadBalancerName"
                },
                "dns_name": {
                  "type": "string",
                  "documentation": "<p> Specifies the external DNS name associated with the LoadBalancer. </p>",
                  "serialized_name": "DNSName"
                },
                "canonical_hosted_zone_name": {
                  "type": "string",
                  "documentation": "<p> Provides the name of the Amazon Route 53 hosted zone that is associated with the LoadBalancer. For information on how to associate your load balancer with a hosted zone, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/using-domain-names-with-elb.html\">Using Domain Names With Elastic Load Balancing</a> in the <i>Elastic Load Balancing Developer Guide</i>. </p>",
                  "serialized_name": "CanonicalHostedZoneName"
                },
                "canonical_hosted_zone_name_id": {
                  "type": "string",
                  "documentation": "<p> Provides the ID of the Amazon Route 53 hosted zone name that is associated with the LoadBalancer. For information on how to associate or disassociate your load balancer with a hosted zone, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/using-domain-names-with-elb.html\">Using Domain Names With Elastic Load Balancing</a> in the <i>Elastic Load Balancing Developer Guide</i>. </p>",
                  "serialized_name": "CanonicalHostedZoneNameID"
                },
                "listener_descriptions": {
                  "type": "list",
                  "documentation": "<p> LoadBalancerPort, InstancePort, Protocol, InstanceProtocol, and PolicyNames are returned in a list of tuples in the ListenerDescriptions element. </p>",
                  "serialized_name": "ListenerDescriptions",
                  "members": {
                    "type": "structure",
                    "documentation": "<p> The ListenerDescription data type. </p>",
                    "members": {
                      "listener": {
                        "type": "structure",
                        "documentation": "<p> The Listener data type. </p>",
                        "serialized_name": "Listener",
                        "members": {
                          "protocol": {
                            "type": "string",
                            "documentation": "<p> Specifies the LoadBalancer transport protocol to use for routing - HTTP, HTTPS, TCP or SSL. This property cannot be modified for the life of the LoadBalancer. </p>",
                            "serialized_name": "Protocol"
                          },
                          "load_balancer_port": {
                            "type": "integer",
                            "documentation": "<p> Specifies the external LoadBalancer port number. This property cannot be modified for the life of the LoadBalancer. </p>",
                            "serialized_name": "LoadBalancerPort"
                          },
                          "instance_protocol": {
                            "type": "string",
                            "documentation": "<p> Specifies the protocol to use for routing traffic to back-end instances - HTTP, HTTPS, TCP, or SSL. This property cannot be modified for the life of the LoadBalancer. </p> If the front-end protocol is HTTP or HTTPS, <code>InstanceProtocol</code> has to be at the same protocol layer, i.e., HTTP or HTTPS. Likewise, if the front-end protocol is TCP or SSL, InstanceProtocol has to be TCP or SSL. If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is secure, i.e., HTTPS or SSL, the listener's <code>InstanceProtocol</code> has to be secure, i.e., HTTPS or SSL. If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is HTTP or TCP, the listener's <code>InstanceProtocol</code> must be either HTTP or TCP.",
                            "serialized_name": "InstanceProtocol"
                          },
                          "instance_port": {
                            "type": "integer",
                            "documentation": "<p> Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the LoadBalancer. </p>",
                            "serialized_name": "InstancePort"
                          },
                          "ssl_certificate_id": {
                            "type": "string",
                            "documentation": "<p> The ARN string of the server certificate. To get the ARN of the server certificate, call the AWS Identity and Access Management <a href=\"http://docs.aws.amazon.com/IAM/latest/APIReference/index.html?API_UploadServerCertificate.html\">UploadServerCertificate </a> API. </p>",
                            "serialized_name": "SSLCertificateId"
                          }
                        }
                      },
                      "policy_names": {
                        "type": "list",
                        "documentation": "<p> A list of policies enabled for this listener. An empty list indicates that no policies are enabled. </p>",
                        "serialized_name": "PolicyNames",
                        "members": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "policies": {
                  "type": "structure",
                  "documentation": "<p> Provides a list of policies defined for the LoadBalancer. </p>",
                  "serialized_name": "Policies",
                  "members": {
                    "app_cookie_stickiness_policies": {
                      "type": "list",
                      "documentation": "<p> A list of the AppCookieStickinessPolicy objects created with CreateAppCookieStickinessPolicy. </p>",
                      "serialized_name": "AppCookieStickinessPolicies",
                      "members": {
                        "type": "structure",
                        "documentation": "<p>The AppCookieStickinessPolicy data type. </p>",
                        "members": {
                          "policy_name": {
                            "type": "string",
                            "documentation": "<p>The mnemonic name for the policy being created. The name must be unique within a set of policies for this LoadBalancer. </p>",
                            "serialized_name": "PolicyName"
                          },
                          "cookie_name": {
                            "type": "string",
                            "documentation": "<p>The name of the application cookie used for stickiness. </p>",
                            "serialized_name": "CookieName"
                          }
                        }
                      }
                    },
                    "lb_cookie_stickiness_policies": {
                      "type": "list",
                      "documentation": "<p> A list of LBCookieStickinessPolicy objects created with CreateAppCookieStickinessPolicy. </p>",
                      "serialized_name": "LBCookieStickinessPolicies",
                      "members": {
                        "type": "structure",
                        "documentation": "<p>The LBCookieStickinessPolicy data type. </p>",
                        "members": {
                          "policy_name": {
                            "type": "string",
                            "documentation": "<p>The name for the policy being created. The name must be unique within the set of policies for this LoadBalancer. </p>",
                            "serialized_name": "PolicyName"
                          },
                          "cookie_expiration_period": {
                            "type": "integer",
                            "documentation": "<p>The time period in seconds after which the cookie should be considered stale. Not specifying this parameter indicates that the stickiness session will last for the duration of the browser session. </p>",
                            "serialized_name": "CookieExpirationPeriod"
                          }
                        }
                      }
                    },
                    "other_policies": {
                      "type": "list",
                      "documentation": "<p> A list of policy names other than the stickiness policies. </p>",
                      "serialized_name": "OtherPolicies",
                      "members": {
                        "type": "string"
                      }
                    }
                  }
                },
                "backend_server_descriptions": {
                  "type": "list",
                  "documentation": "<p> Contains a list of back-end server descriptions. </p>",
                  "serialized_name": "BackendServerDescriptions",
                  "members": {
                    "type": "structure",
                    "documentation": "<p> This data type is used as a response element in the DescribeLoadBalancers action to describe the configuration of the back-end server. </p>",
                    "members": {
                      "instance_port": {
                        "type": "integer",
                        "documentation": "<p> Provides the port on which the back-end server is listening. </p>",
                        "serialized_name": "InstancePort"
                      },
                      "policy_names": {
                        "type": "list",
                        "documentation": "<p> Provides a list of policy names enabled for the back-end server. </p>",
                        "serialized_name": "PolicyNames",
                        "members": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "availability_zones": {
                  "type": "list",
                  "documentation": "<p> Specifies a list of Availability Zones. </p>",
                  "serialized_name": "AvailabilityZones",
                  "members": {
                    "type": "string"
                  }
                },
                "subnets": {
                  "type": "list",
                  "documentation": "<p> Provides a list of VPC subnet IDs for the LoadBalancer. </p>",
                  "serialized_name": "Subnets",
                  "members": {
                    "type": "string"
                  }
                },
                "vpc_id": {
                  "type": "string",
                  "documentation": "<p> Provides the ID of the VPC attached to the LoadBalancer. </p>",
                  "serialized_name": "VPCId"
                },
                "instances": {
                  "type": "list",
                  "documentation": "<p> Provides a list of EC2 instance IDs for the LoadBalancer. </p>",
                  "serialized_name": "Instances",
                  "members": {
                    "type": "structure",
                    "documentation": "<p> The Instance data type. </p>",
                    "members": {
                      "instance_id": {
                        "type": "string",
                        "documentation": "<p> Provides an EC2 instance ID. </p>",
                        "serialized_name": "InstanceId"
                      }
                    }
                  }
                },
                "health_check": {
                  "type": "structure",
                  "documentation": "<p> Specifies information regarding the various health probes conducted on the LoadBalancer. </p>",
                  "serialized_name": "HealthCheck",
                  "members": {
                    "target": {
                      "type": "string",
                      "documentation": "<p> Specifies the instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535. </p> <p> TCP is the default, specified as a TCP: port pair, for example \"TCP:5000\". In this case a healthcheck simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy. </p> <p>SSL is also specified as SSL: port pair, for example, SSL:5000.</p> <p> For HTTP or HTTPS protocol, the situation is different. You have to include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example \"HTTP:80/weather/us/wa/seattle\". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than \"200 OK\" within the timeout period is considered unhealthy. </p> <p> The total length of the HTTP ping target needs to be 1024 16-bit Unicode characters or less. </p>",
                      "serialized_name": "Target"
                    },
                    "interval": {
                      "type": "integer",
                      "documentation": "<p> Specifies the approximate interval, in seconds, between health checks of an individual instance. </p>",
                      "serialized_name": "Interval"
                    },
                    "timeout": {
                      "type": "integer",
                      "documentation": "<p> Specifies the amount of time, in seconds, during which no response means a failed health probe. </p> This value must be less than the <i>Interval</i> value.",
                      "serialized_name": "Timeout"
                    },
                    "unhealthy_threshold": {
                      "type": "integer",
                      "documentation": "<p> Specifies the number of consecutive health probe failures required before moving the instance to the <i>Unhealthy</i> state. </p>",
                      "serialized_name": "UnhealthyThreshold"
                    },
                    "healthy_threshold": {
                      "type": "integer",
                      "documentation": "<p> Specifies the number of consecutive health probe successes required before moving the instance to the <i>Healthy</i> state. </p>",
                      "serialized_name": "HealthyThreshold"
                    }
                  }
                },
                "source_security_group": {
                  "type": "structure",
                  "documentation": "<p> The security group that you can use as part of your inbound rules for your LoadBalancer's back-end Amazon EC2 application instances. To only allow traffic from LoadBalancers, add a security group rule to your back end instance that specifies this source security group as the inbound source. </p>",
                  "serialized_name": "SourceSecurityGroup",
                  "members": {
                    "owner_alias": {
                      "type": "string",
                      "documentation": "<p> Owner of the source security group. Use this value for the <code>--source-group-user</code> parameter of the <code>ec2-authorize</code> command in the Amazon EC2 command line tool. </p>",
                      "serialized_name": "OwnerAlias"
                    },
                    "group_name": {
                      "type": "string",
                      "documentation": "<p> Name of the source security group. Use this value for the <code>--source-group</code> parameter of the <code>ec2-authorize</code> command in the Amazon EC2 command line tool. </p>",
                      "serialized_name": "GroupName"
                    }
                  }
                },
                "security_groups": {
                  "type": "list",
                  "documentation": "<p> The security groups the LoadBalancer is a member of (VPC only). </p>",
                  "serialized_name": "SecurityGroups",
                  "members": {
                    "type": "string"
                  }
                },
                "created_time": {
                  "type": "timestamp",
                  "documentation": "<p> Provides the date and time the LoadBalancer was created. </p>",
                  "serialized_name": "CreatedTime"
                },
                "scheme": {
                  "type": "string",
                  "documentation": "<p>Specifies the type of LoadBalancer.</p> <p>If the <code>Scheme</code> is <code>internet-facing</code>, the LoadBalancer has a publicly resolvable DNS name that resolves to public IP addresses.</p> <p>If the <code>Scheme</code> is <code>internal</code>, the LoadBalancer has a publicly resolvable DNS name that resolves to private IP addresses.</p> <p> This option is only available for LoadBalancers attached to an Amazon VPC. </p>",
                  "serialized_name": "Scheme"
                }
              }
            }
          },
          "next_marker": {
            "type": "string",
            "documentation": "<p> An optional parameter reserved for future use. </p>",
            "serialized_name": "NextMarker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        }
      ]
    },
    "detach_load_balancer_from_subnets": {
      "name": "DetachLoadBalancerFromSubnets",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Removes subnets from the set of configured subnets in the VPC for the LoadBalancer. </p> <p> After a subnet is removed all of the EndPoints registered with the LoadBalancer that are in the removed subnet will go into the <i>OutOfService</i> state. When a subnet is removed, the LoadBalancer will balance the traffic among the remaining routable subnets for the LoadBalancer. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DetachLoadBalancerFromSubnets action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer to be detached. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "subnets": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of subnet IDs to remove from the set of configured subnets for the LoadBalancer. </p>",
            "serialized_name": "Subnets",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DetachLoadBalancerFromSubnets action. </p>",
        "members": {
          "subnets": {
            "type": "list",
            "documentation": "<p> A list of subnet IDs removed from the configured set of subnets for the LoadBalancer. </p>",
            "serialized_name": "Subnets",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "disable_availability_zones_for_load_balancer": {
      "name": "DisableAvailabilityZonesForLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Removes the specified EC2 Availability Zones from the set of configured Availability Zones for the LoadBalancer. </p> <p> There must be at least one Availability Zone registered with a LoadBalancer at all times. A client cannot remove all the Availability Zones from a LoadBalancer. Once an Availability Zone is removed, all the instances registered with the LoadBalancer that are in the removed Availability Zone go into the OutOfService state. Upon Availability Zone removal, the LoadBalancer attempts to equally balance the traffic among its remaining usable Availability Zones. Trying to remove an Availability Zone that was not associated with the LoadBalancer does nothing. </p> In order for this call to be successful, the client must have created the LoadBalancer. The client must provide the same account credentials as those that were used to create the LoadBalancer.",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the DisableAvailabilityZonesForLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "availability_zones": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of Availability Zones to be removed from the LoadBalancer. </p> There must be at least one Availability Zone registered with a LoadBalancer at all times. The client cannot remove all the Availability Zones from a LoadBalancer. Specified Availability Zones must be in the same Region.",
            "serialized_name": "AvailabilityZones",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the DisableAvailabilityZonesForLoadBalancer action. </p>",
        "members": {
          "availability_zones": {
            "type": "list",
            "documentation": "<p> A list of updated Availability Zones for the LoadBalancer. </p>",
            "serialized_name": "AvailabilityZones",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "enable_availability_zones_for_load_balancer": {
      "name": "EnableAvailabilityZonesForLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Adds one or more EC2 Availability Zones to the LoadBalancer. </p> <p> The LoadBalancer evenly distributes requests across all its registered Availability Zones that contain instances. As a result, the client must ensure that its LoadBalancer is appropriately scaled for each registered Availability Zone. </p> The new EC2 Availability Zones to be added must be in the same EC2 Region as the Availability Zones for which the LoadBalancer was created.",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the EnableAvailabilityZonesForLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "availability_zones": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of new Availability Zones for the LoadBalancer. Each Availability Zone must be in the same Region as the LoadBalancer. </p>",
            "serialized_name": "AvailabilityZones",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the EnableAvailabilityZonesForLoadBalancer action. </p>",
        "members": {
          "availability_zones": {
            "type": "list",
            "documentation": "<p> An updated list of Availability Zones for the LoadBalancer. </p>",
            "serialized_name": "AvailabilityZones",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        }
      ]
    },
    "register_instances_with_load_balancer": {
      "name": "RegisterInstancesWithLoadBalancer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Adds new instances to the LoadBalancer. </p> <p> Once the instance is registered, it starts receiving traffic and requests from the LoadBalancer. Any instance that is not in any of the Availability Zones registered for the LoadBalancer will be moved to the <i>OutOfService</i> state. It will move to the <i>InService</i> state when the Availability Zone is added to the LoadBalancer. </p> In order for this call to be successful, the client must have created the LoadBalancer. The client must provide the same account credentials as those that were used to create the LoadBalancer. Completion of this API does not guarantee that operation has completed. Rather, it means that the request has been registered and the changes will happen shortly.",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the RegisterInstancesWithLoadBalancer action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "instances": {
            "type": "list",
            "required": true,
            "documentation": "<p> A list of instance IDs that should be registered with the LoadBalancer.</p> When the instance is stopped and then restarted, the IP addresses associated with your instance changes. Elastic Load Balancing cannot recognize the new IP address, which prevents it from routing traffic to your instances. We recommend that you de-register your Amazon EC2 instances from your load balancer after you stop your instance, and then register the load balancer with your instance after you've restarted. To de-register your instances from load balancer, use DeregisterInstancesFromLoadBalancer action.",
            "serialized_name": "Instances",
            "members": {
              "type": "structure",
              "documentation": "<p> The Instance data type. </p>",
              "members": {
                "instance_id": {
                  "type": "string",
                  "documentation": "<p> Provides an EC2 instance ID. </p>",
                  "serialized_name": "InstanceId"
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the RegisterInstancesWithLoadBalancer action. </p>",
        "members": {
          "instances": {
            "type": "list",
            "documentation": "<p> An updated list of instances for the LoadBalancer. </p>",
            "serialized_name": "Instances",
            "members": {
              "type": "structure",
              "documentation": "<p> The Instance data type. </p>",
              "members": {
                "instance_id": {
                  "type": "string",
                  "documentation": "<p> Provides an EC2 instance ID. </p>",
                  "serialized_name": "InstanceId"
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The specified EndPoint is not valid. </p>",
          "members": {
          }
        }
      ]
    },
    "set_load_balancer_listener_ssl_certificate": {
      "name": "SetLoadBalancerListenerSSLCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same LoadBalancer and port. </p> <p>For information on using SetLoadBalancerListenerSSLCertificate, see <i>Using the Query API </i> in the <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/US_UpdatingLoadBalancerSSL.html\">Updating an SSL Certificate for a Load Balancer</a> section in of the <i>Elastic Load Balancing Developer Guide</i>.</p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the SetLoadBalancerListenerSSLCertificate action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name of the the LoadBalancer. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "load_balancer_port": {
            "type": "integer",
            "required": true,
            "documentation": "<p> The port that uses the specified SSL certificate. </p>",
            "serialized_name": "LoadBalancerPort"
          },
          "ssl_certificate_id": {
            "type": "string",
            "required": true,
            "documentation": "<p> The ID of the SSL certificate chain to use. For more information on SSL certificates, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingServerCerts.html\"> Managing Server Certificates </a> in the AWS Identity and Access Management documentation. </p>",
            "serialized_name": "SSLCertificateId"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the SetLoadBalancerListenerSSLCertificate action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified SSL ID does not refer to a valid SSL certificate in the AWS Identity and Access Management Service. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> LoadBalancer does not have a listener configured at the given port. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "set_load_balancer_policies_for_backend_server": {
      "name": "SetLoadBalancerPoliciesForBackendServer",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Replaces the current set of policies associated with a port on which the back-end server is listening with a new set of policies. After the policies have been created using CreateLoadBalancerPolicy, they can be applied here as a list. At this time, only the back-end server authentication policy type can be applied to the back-end ports; this policy type is composed of multiple public key policies. </p>",
      "input": {
        "type": "structure",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The mnemonic name associated with the LoadBalancer. This name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "instance_port": {
            "type": "integer",
            "required": true,
            "documentation": "<p> The port number associated with the back-end server. </p>",
            "serialized_name": "InstancePort"
          },
          "policy_names": {
            "type": "list",
            "required": true,
            "documentation": "<p> List of policy names to be set. If the list is empty, then all current polices are removed from the back-end server. </p>",
            "serialized_name": "PolicyNames",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the SetLoadBalancerPoliciesForBackendServer action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more specified policies were not found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    },
    "set_load_balancer_policies_of_listener": {
      "name": "SetLoadBalancerPoliciesOfListener",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Associates, updates, or disables a policy with a listener on the LoadBalancer. You can associate multiple policies with a listener. </p>",
      "input": {
        "type": "structure",
        "documentation": "<p> The input for the SetLoadBalancerPoliciesOfListener action. </p>",
        "members": {
          "load_balancer_name": {
            "type": "string",
            "required": true,
            "documentation": "<p> The name associated with the LoadBalancer. The name must be unique within the client AWS account. </p>",
            "serialized_name": "LoadBalancerName"
          },
          "load_balancer_port": {
            "type": "integer",
            "required": true,
            "documentation": "<p> The external port of the LoadBalancer with which this policy applies to. </p>",
            "serialized_name": "LoadBalancerPort"
          },
          "policy_names": {
            "type": "list",
            "required": true,
            "documentation": "<p> List of policies to be associated with the listener. Currently this list can have at most one policy. If the list is empty, the current policy is removed from the listener. </p>",
            "serialized_name": "PolicyNames",
            "members": {
              "type": "string"
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p> The output for the SetLoadBalancerPoliciesOfListener action. </p>",
        "members": {
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p> The specified LoadBalancer could not be found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> One or more specified policies were not found. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> LoadBalancer does not have a listener configured at the given port. </p>",
          "members": {
          }
        },
        {
          "type": "structure",
          "documentation": "<p> Requested configuration change is invalid. </p>",
          "members": {
          }
        }
      ]
    }
  }
}