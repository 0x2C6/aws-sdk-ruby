{
  "version": "2010-05-08",
  "endpoint": "iam.%s.amazonaws.com",
  "metadata": {
    "result_wrapped": true,
    "service_abbreviation": "IAM",
    "service_full_name": "AWS Identity and Access Management",
    "signature_version": "v4",
    "xmlnamespace": "https://iam.amazonaws.com/doc/2010-05-08/"
  },
  "plugins": [
    "Aws::Plugins::GlobalConfiguration",
    "Aws::Plugins::VersionedApiLoader",
    "Aws::Plugins::RegionalEndpoint",
    "Aws::Plugins::EnvironmentCredentials",
    "Aws::Plugins::ContentLength",
    "Aws::Plugins::QuerySerializer"
  ],
  "documentation": "<fullname>AWS Identity and Access Management</fullname> <p>This guide provides descriptions of the Identity and Access Management (IAM) API as well as links to related content in the guide, <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/\" target=\"_blank\">Using IAM</a>.</p> <p>IAM is a web service that enables AWS customers to manage users and user permissions under their AWS account. For more information about this product go to <a href=\"http://aws.amazon.com/iam/\" target=\"_blank\">AWS Identity and Access Management (IAM)</a>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html\" target=\"_blank\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\" target=\"_blank\">Making Query Requests</a> in <i>Using IAM</i>.</p> <p>If you're new to AWS and need additional technical information about a specific AWS product, you can find the product's technical documentation at <a href=\"http://aws.amazon.com/documentation/\" target=\"_blank\">http://aws.amazon.com/documentation/</a>.</p>",
  "operations": {
    "add_role_to_instance_profile": {
      "name": "AddRoleToInstanceProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Adds the specified role to the specified instance profile. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For more information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "instance_profile_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the instance profile to update.</p>",
            "serialized_name": "InstanceProfileName"
          },
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to add.</p>",
            "serialized_name": "RoleName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "add_user_to_group": {
      "name": "AddUserToGroup",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Adds the specified user to the specified group.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group to update.</p>",
            "serialized_name": "GroupName"
          },
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to add.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "change_password": {
      "name": "ChangePassword",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Changes the password of the IAM user calling <code>ChangePassword</code>. The root account password is not affected by this action. For information about modifying passwords, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/Using_ManagingLogins.html\" target=\"_blank\">Managing Passwords</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "old_password": {
            "type": "string",
            "required": true,
            "serialized_name": "OldPassword"
          },
          "new_password": {
            "type": "string",
            "required": true,
            "serialized_name": "NewPassword"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the type of user for the transaction was incorrect.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_access_key": {
      "name": "CreateAccessKey",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a new AWS Secret Access Key and corresponding AWS Access Key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS Access Key ID signing the request. Because this action works for access keys under the AWS account, you can use this API to manage root credentials even if the AWS account has no associated users.</p> <p>For information about limits on the number of keys you can create, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <important>To ensure the security of your AWS account, the Secret Access Key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</important>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>The user name that the new key will belong to.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateAccessKey action.</p>",
        "members": {
          "access_key": {
            "type": "structure",
            "documentation": "<p>Information about the access key.</p>",
            "serialized_name": "AccessKey",
            "members": {
              "user_name": {
                "type": "string",
                "documentation": "<p>Name of the user the key is associated with.</p>",
                "serialized_name": "UserName"
              },
              "access_key_id": {
                "type": "string",
                "documentation": "<p>The ID for this access key.</p>",
                "serialized_name": "AccessKeyId"
              },
              "status": {
                "type": "string",
                "documentation": "<p>The status of the access key. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>",
                "serialized_name": "Status",
                "enum": [
                  "Active",
                  "Inactive"
                ]
              },
              "secret_access_key": {
                "type": "string",
                "documentation": "<p>The secret key used to sign requests.</p>",
                "serialized_name": "SecretAccessKey"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the access key was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_account_alias": {
      "name": "CreateAccountAlias",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>This action creates an alias for your AWS account. For information about using an AWS account alias, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AccountAlias.html\" target=\"_blank\">Using an Alias for Your AWS Account ID</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "account_alias": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the account alias to create.</p>",
            "serialized_name": "AccountAlias"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_group": {
      "name": "CreateGroup",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a new group.</p> <p>For information about the number of groups you can create, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path": {
            "type": "string",
            "documentation": "<p>The path to the group. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>",
            "serialized_name": "Path"
          },
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group to create. Do not include the path in this value.</p>",
            "serialized_name": "GroupName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateGroup action.</p>",
        "members": {
          "group": {
            "type": "structure",
            "documentation": "<p>Information about the group.</p>",
            "serialized_name": "Group",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the group. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "group_name": {
                "type": "string",
                "documentation": "<p>The name that identifies the group.</p>",
                "serialized_name": "GroupName"
              },
              "group_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "GroupId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the group was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_instance_profile": {
      "name": "CreateInstanceProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a new instance profile. For information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>For information about the number of instance profiles you can create, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "instance_profile_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the instance profile to create.</p>",
            "serialized_name": "InstanceProfileName"
          },
          "path": {
            "type": "string",
            "documentation": "<p>The path to the instance profile. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>",
            "serialized_name": "Path"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateInstanceProfile action.</p>",
        "members": {
          "instance_profile": {
            "type": "structure",
            "documentation": "<p>Information about the instance profile.</p>",
            "serialized_name": "InstanceProfile",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the instance profile. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "instance_profile_name": {
                "type": "string",
                "documentation": "<p>The name identifying the instance profile.</p>",
                "serialized_name": "InstanceProfileName"
              },
              "instance_profile_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the instance profile. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "InstanceProfileId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the instance profile was created.</p>",
                "serialized_name": "CreateDate"
              },
              "roles": {
                "type": "list",
                "documentation": "<p>The role associated with the instance profile.</p>",
                "serialized_name": "Roles",
                "members": {
                  "type": "structure",
                  "documentation": "<p>The Role data type contains information about a role.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateRole</p></li> <li><p>GetRole</p></li> <li><p>ListRoles</p></li> </ul>",
                  "members": {
                    "path": {
                      "type": "string",
                      "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "Path"
                    },
                    "role_name": {
                      "type": "string",
                      "documentation": "<p>The name identifying the role.</p>",
                      "serialized_name": "RoleName"
                    },
                    "role_id": {
                      "type": "string",
                      "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "RoleId"
                    },
                    "arn": {
                      "type": "string",
                      "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "Arn"
                    },
                    "create_date": {
                      "type": "timestamp",
                      "documentation": "<p>The date when the role was created.</p>",
                      "serialized_name": "CreateDate"
                    },
                    "assume_role_policy_document": {
                      "type": "string",
                      "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                      "serialized_name": "AssumeRolePolicyDocument"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_login_profile": {
      "name": "CreateLoginProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_ManagingLogins.html\" target=\"_blank\">Managing Passwords</a> in <i>Using IAM</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to create a password for.</p>",
            "serialized_name": "UserName"
          },
          "password": {
            "type": "string",
            "required": true,
            "documentation": "<p>The new password for the user name.</p>",
            "serialized_name": "Password"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateLoginProfile action.</p>",
        "members": {
          "login_profile": {
            "type": "structure",
            "documentation": "<p>The user name and password create date.</p>",
            "serialized_name": "LoginProfile",
            "members": {
              "user_name": {
                "type": "string",
                "documentation": "<p>The name of the user, which can be used for signing into the AWS Management Console.</p>",
                "serialized_name": "UserName"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the password for the user was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_role": {
      "name": "CreateRole",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a new role for your AWS account. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>The policy grants permission to an EC2 instance to assume the role. The policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>. Currently, only EC2 instances can assume roles.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path": {
            "type": "string",
            "documentation": "<p>The path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>",
            "serialized_name": "Path"
          },
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to create.</p>",
            "serialized_name": "RoleName"
          },
          "assume_role_policy_document": {
            "type": "string",
            "required": true,
            "documentation": "<p>The policy that grants an entity permission to assume the role.</p>",
            "serialized_name": "AssumeRolePolicyDocument"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateRole action.</p>",
        "members": {
          "role": {
            "type": "structure",
            "documentation": "<p>Information about the role.</p>",
            "serialized_name": "Role",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "role_name": {
                "type": "string",
                "documentation": "<p>The name identifying the role.</p>",
                "serialized_name": "RoleName"
              },
              "role_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "RoleId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the role was created.</p>",
                "serialized_name": "CreateDate"
              },
              "assume_role_policy_document": {
                "type": "string",
                "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                "serialized_name": "AssumeRolePolicyDocument"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_user": {
      "name": "CreateUser",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a new user for your AWS account.</p> <p>For information about limitations on the number of users you can create, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path": {
            "type": "string",
            "documentation": "<p>The path for the user name. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>",
            "serialized_name": "Path"
          },
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to create.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateUser action.</p>",
        "members": {
          "user": {
            "type": "structure",
            "documentation": "<p>Information about the user.</p>",
            "serialized_name": "User",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the user. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "user_name": {
                "type": "string",
                "documentation": "<p>The name identifying the user.</p>",
                "serialized_name": "UserName"
              },
              "user_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "UserId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the user. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the user was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "create_virtual_mfa_device": {
      "name": "CreateVirtualMFADevice",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a href=\"http://docs.amazonwebservices.com/IAM/latest/APIReference/API_EnableMFADevice.html\" target=\"_blank\">EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_VirtualMFA.html\" target=\"_blank\">Using a Virtual MFA Device</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <important>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information, such as your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</important>",
      "input": {
        "type": "structure",
        "members": {
          "path": {
            "type": "string",
            "documentation": "<p>The path for the virtual MFA device. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>",
            "serialized_name": "Path"
          },
          "virtual_mfa_device_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p>",
            "serialized_name": "VirtualMFADeviceName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the CreateVirtualMFADevice action.</p>",
        "members": {
          "virtual_mfa_device": {
            "type": "structure",
            "documentation": "<p>A newly created virtual MFA device.</p>",
            "serialized_name": "VirtualMFADevice",
            "members": {
              "serial_number": {
                "type": "string",
                "documentation": "<p>The serial number associated with <code>VirtualMFADevice</code>.</p>",
                "serialized_name": "SerialNumber"
              },
              "base_32_string_seed": {
                "type": "blob",
                "documentation": "<p>The Base32 seed defined as specified in <a href=\"http://www.ietf.org/rfc/rfc3548.txt\" target=\"_blank\">RFC3548</a>. The <code>Base32StringSeed</code> is Base64-encoded.</p>",
                "serialized_name": "Base32StringSeed"
              },
              "qr_code_png": {
                "type": "blob",
                "documentation": "<p>A QR code PNG image that encodes <i>otpauth://totp/$virtualMFADeviceName@$AccountName? secret=$Base32String</i> where $virtualMFADeviceName is one of the create call arguments, AccountName is the user name if set (accountId otherwise), and Base32String is the seed in Base32 format. The <code>Base32String</code> is Base64-encoded.</p>",
                "serialized_name": "QRCodePNG"
              },
              "user": {
                "type": "structure",
                "documentation": "<p>The User data type contains information about a user.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateUser</p></li> <li><p>GetUser</p></li> <li><p>ListUsers</p></li> </ul>",
                "serialized_name": "User",
                "members": {
                  "path": {
                    "type": "string",
                    "documentation": "<p>Path to the user. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                    "serialized_name": "Path"
                  },
                  "user_name": {
                    "type": "string",
                    "documentation": "<p>The name identifying the user.</p>",
                    "serialized_name": "UserName"
                  },
                  "user_id": {
                    "type": "string",
                    "documentation": "<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                    "serialized_name": "UserId"
                  },
                  "arn": {
                    "type": "string",
                    "documentation": "<p>The Amazon Resource Name (ARN) specifying the user. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                    "serialized_name": "Arn"
                  },
                  "create_date": {
                    "type": "timestamp",
                    "documentation": "<p>The date when the user was created.</p>",
                    "serialized_name": "CreateDate"
                  }
                }
              },
              "enable_date": {
                "type": "timestamp",
                "serialized_name": "EnableDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "deactivate_mfa_device": {
      "name": "DeactivateMFADevice",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user whose MFA device you want to deactivate.</p>",
            "serialized_name": "UserName"
          },
          "serial_number": {
            "type": "string",
            "required": true,
            "documentation": "<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>",
            "serialized_name": "SerialNumber"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_access_key": {
      "name": "DeleteAccessKey",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the access key associated with the specified user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS Access Key ID signing the request. Because this action works for access keys under the AWS account, you can use this API to manage root credentials even if the AWS account has no associated users.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user whose key you want to delete.</p>",
            "serialized_name": "UserName"
          },
          "access_key_id": {
            "type": "string",
            "required": true,
            "documentation": "<p>The Access Key ID for the Access Key ID and Secret Access Key you want to delete.</p>",
            "serialized_name": "AccessKeyId"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_account_alias": {
      "name": "DeleteAccountAlias",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AccountAlias.html\" target=\"_blank\">Using an Alias for Your AWS Account ID</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "account_alias": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the account alias to delete.</p>",
            "serialized_name": "AccountAlias"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_account_password_policy": {
      "name": "DeleteAccountPasswordPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the password policy for the AWS account.</p>",
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_group": {
      "name": "DeleteGroup",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified group. The group must not contain any users or have any attached policies.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group to delete.</p>",
            "serialized_name": "GroupName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_group_policy": {
      "name": "DeleteGroupPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified policy that is associated with the specified group.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group the policy is associated with.</p>",
            "serialized_name": "GroupName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document to delete.</p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_instance_profile": {
      "name": "DeleteInstanceProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important>Make sure you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</important> <p>For more information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "instance_profile_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the instance profile to delete.</p>",
            "serialized_name": "InstanceProfileName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_login_profile": {
      "name": "DeleteLoginProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the password for the specified user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important>Deleting a user's password does not prevent a user from accessing IAM through the command line interface or the API. To prevent all user access you must also either make the access key inactive or delete it. For more information about making keys inactive or deleting them, see UpdateAccessKey and DeleteAccessKey. </important>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user whose password you want to delete.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_role": {
      "name": "DeleteRole",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <important>Make sure you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</important>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to delete.</p>",
            "serialized_name": "RoleName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_role_policy": {
      "name": "DeleteRolePolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified policy associated with the specified role.</p>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role the associated with the policy.</p>",
            "serialized_name": "RoleName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document to delete.</p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_server_certificate": {
      "name": "DeleteServerCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified server certificate.</p> <important>If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href=\"http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html\" target=\"blank\">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</important>",
      "input": {
        "type": "structure",
        "members": {
          "server_certificate_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the server certificate you want to delete.</p>",
            "serialized_name": "ServerCertificateName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_signing_certificate": {
      "name": "DeleteSigningCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified signing certificate associated with the specified user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS Access Key ID signing the request. Because this action works for access keys under the AWS account, you can use this API to manage root credentials even if the AWS account has no associated users.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user the signing certificate belongs to.</p>",
            "serialized_name": "UserName"
          },
          "certificate_id": {
            "type": "string",
            "required": true,
            "documentation": "<p>ID of the signing certificate to delete.</p>",
            "serialized_name": "CertificateId"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_user": {
      "name": "DeleteUser",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified user. The user must not belong to any groups, have any keys or signing certificates, or have any attached policies.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to delete.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_user_policy": {
      "name": "DeleteUserPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes the specified policy associated with the specified user.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user the policy is associated with.</p>",
            "serialized_name": "UserName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document to delete.</p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "delete_virtual_mfa_device": {
      "name": "DeleteVirtualMFADevice",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Deletes a virtual MFA device.</p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/APIReference/API_DeactivateMFADevice.html\">DeactivateMFADevice</a>.",
      "input": {
        "type": "structure",
        "members": {
          "serial_number": {
            "type": "string",
            "required": true,
            "documentation": "<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p>",
            "serialized_name": "SerialNumber"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "enable_mfa_device": {
      "name": "EnableMFADevice",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Enables the specified MFA device and associates it with the specified user name. When enabled, the MFA device is required for every subsequent login by the user name associated with the device.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user for whom you want to enable the MFA device.</p>",
            "serialized_name": "UserName"
          },
          "serial_number": {
            "type": "string",
            "required": true,
            "documentation": "<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>",
            "serialized_name": "SerialNumber"
          },
          "authentication_code_1": {
            "type": "string",
            "required": true,
            "documentation": "<p>An authentication code emitted by the device.</p>",
            "serialized_name": "AuthenticationCode1"
          },
          "authentication_code_2": {
            "type": "string",
            "required": true,
            "documentation": "<p>A subsequent authentication code emitted by the device.</p>",
            "serialized_name": "AuthenticationCode2"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the authentication code was not recognized. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_account_password_policy": {
      "name": "GetAccountPasswordPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a>.</p>",
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetAccountPasswordPolicy action.</p>",
        "members": {
          "password_policy": {
            "type": "structure",
            "documentation": "<p>The PasswordPolicy data type contains information about the account password policy.</p> <p> This data type is used as a response element in the action GetAccountPasswordPolicy. </p>",
            "serialized_name": "PasswordPolicy",
            "members": {
              "minimum_password_length": {
                "type": "integer",
                "documentation": "<p>Minimum length to require for IAM user passwords.</p>",
                "serialized_name": "MinimumPasswordLength"
              },
              "require_symbols": {
                "type": "boolean",
                "documentation": "<p>Specifies whether to require symbols for IAM user passwords.</p>",
                "serialized_name": "RequireSymbols"
              },
              "require_numbers": {
                "type": "boolean",
                "documentation": "<p>Specifies whether to require numbers for IAM user passwords.</p>",
                "serialized_name": "RequireNumbers"
              },
              "require_uppercase_characters": {
                "type": "boolean",
                "documentation": "<p>Specifies whether to require uppercase characters for IAM user passwords.</p>",
                "serialized_name": "RequireUppercaseCharacters"
              },
              "require_lowercase_characters": {
                "type": "boolean",
                "documentation": "<p>Specifies whether to require lowercase characters for IAM user passwords.</p>",
                "serialized_name": "RequireLowercaseCharacters"
              },
              "allow_users_to_change_password": {
                "type": "boolean",
                "documentation": "<p>Specifies whether to allow IAM users to change their own password.</p>",
                "serialized_name": "AllowUsersToChangePassword"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_account_summary": {
      "name": "GetAccountSummary",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves account level information about account entity usage and IAM quotas.</p> <p>For information about limitations on IAM entities, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetAccountSummary action.</p>",
        "members": {
          "summary_map": {
            "type": "map",
            "documentation": "<p>A set of key value pairs containing account-level information.</p> <p> <code>SummaryMap</code> contains the following keys: <ul> <li><p><code>AccessKeysPerUserQuota</code> - Maximum number of access keys that can be created per user</p></li> <li><p><code>AccountMFAEnabled</code> - 1 if the root account has an MFA device assigned to it, 0 otherwise</p></li> <li><p><code>AssumeRolePolicySizeQuota</code> - Maximum allowed size for assume role policy documents (in kilobytes) </p></li> <li><p><code>GroupPolicySizeQuota</code> - Maximum allowed size for Group policy documents (in kilobytes)</p></li> <li><p><code>Groups</code> - Number of Groups for the AWS account</p></li> <li><p><code>GroupsPerUserQuota</code> - Maximum number of groups a user can belong to</p></li> <li><p><code>GroupsQuota</code> - Maximum groups allowed for the AWS account</p></li> <li><p><code>InstanceProfiles</code> - Number of instance profiles for the AWS account</p></li> <li><p><code>InstanceProfilesQuota</code> - Maximum instance profiles allowed for the AWS account</p></li> <li><p><code>MFADevices</code> - Number of MFA devices, either assigned or unassigned</p></li> <li><p><code>MFADevicesInUse</code> - Number of MFA devices that have been assigned to an IAM user or to the root account</p></li> <li><p><code>RolePolicySizeQuota</code> - Maximum allowed size for role policy documents (in kilobytes) </p></li> <li><p><code>Roles</code> - Number of roles for the AWS account</p></li> <li><p><code>RolesQuota</code> - Maximum roles allowed for the AWS account</p></li> <li><p><code>ServerCertificates</code> - Number of server certificates for the AWS account</p></li> <li><p><code>ServerCertificatesQuota</code> - Maximum server certificates allowed for the AWS account</p></li> <li><p><code>SigningCertificatesPerUserQuota</code> - Maximum number of X509 certificates allowed for a user</p></li> <li><p><code>UserPolicySizeQuota</code> - Maximum allowed size for user policy documents (in kilobytes) </p></li> <li><p><code>Users</code> - Number of users for the AWS account</p></li> <li><p><code>UsersQuota</code> - Maximum users allowed for the AWS account</p></li> </ul> </p>",
            "serialized_name": "SummaryMap",
            "keys": {
              "type": "string",
              "enum": [
                "Users",
                "UsersQuota",
                "Groups",
                "GroupsQuota",
                "ServerCertificates",
                "ServerCertificatesQuota",
                "UserPolicySizeQuota",
                "GroupPolicySizeQuota",
                "GroupsPerUserQuota",
                "SigningCertificatesPerUserQuota",
                "AccessKeysPerUserQuota",
                "MFADevices",
                "MFADevicesInUse",
                "AccountMFAEnabled"
              ]
            },
            "members": {
              "type": "integer"
            }
          }
        }
      }
    },
    "get_group": {
      "name": "GetGroup",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Returns a list of users that are in the specified group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group.</p>",
            "serialized_name": "GroupName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetGroup action.</p>",
        "members": {
          "group": {
            "type": "structure",
            "documentation": "<p>Information about the group.</p>",
            "serialized_name": "Group",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the group. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "group_name": {
                "type": "string",
                "documentation": "<p>The name that identifies the group.</p>",
                "serialized_name": "GroupName"
              },
              "group_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "GroupId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the group was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          },
          "users": {
            "type": "list",
            "documentation": "<p>A list of users in the group.</p>",
            "serialized_name": "Users",
            "members": {
              "type": "structure",
              "documentation": "<p>The User data type contains information about a user.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateUser</p></li> <li><p>GetUser</p></li> <li><p>ListUsers</p></li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the user. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "user_name": {
                  "type": "string",
                  "documentation": "<p>The name identifying the user.</p>",
                  "serialized_name": "UserName"
                },
                "user_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "UserId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the user. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the user was created.</p>",
                  "serialized_name": "CreateDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more user names to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more user names in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If IsTruncated is <code>true</code>, then this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_group_policy": {
      "name": "GetGroupPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves the specified policy document for the specified group. The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group the policy is associated with.</p>",
            "serialized_name": "GroupName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document to get.</p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetGroupPolicy action.</p>",
        "members": {
          "group_name": {
            "type": "string",
            "documentation": "<p>The group the policy is associated with.</p>",
            "serialized_name": "GroupName"
          },
          "policy_name": {
            "type": "string",
            "documentation": "<p>The name of the policy.</p>",
            "serialized_name": "PolicyName"
          },
          "policy_document": {
            "type": "string",
            "documentation": "<p>The policy document.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_instance_profile": {
      "name": "GetInstanceProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>. For more information about ARNs, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/Using_Identifiers.html#Identifiers_ARNs\">ARNs</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "instance_profile_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the instance profile to get information about.</p>",
            "serialized_name": "InstanceProfileName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetInstanceProfile action.</p>",
        "members": {
          "instance_profile": {
            "type": "structure",
            "documentation": "<p>Information about the instance profile.</p>",
            "serialized_name": "InstanceProfile",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the instance profile. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "instance_profile_name": {
                "type": "string",
                "documentation": "<p>The name identifying the instance profile.</p>",
                "serialized_name": "InstanceProfileName"
              },
              "instance_profile_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the instance profile. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "InstanceProfileId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the instance profile was created.</p>",
                "serialized_name": "CreateDate"
              },
              "roles": {
                "type": "list",
                "documentation": "<p>The role associated with the instance profile.</p>",
                "serialized_name": "Roles",
                "members": {
                  "type": "structure",
                  "documentation": "<p>The Role data type contains information about a role.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateRole</p></li> <li><p>GetRole</p></li> <li><p>ListRoles</p></li> </ul>",
                  "members": {
                    "path": {
                      "type": "string",
                      "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "Path"
                    },
                    "role_name": {
                      "type": "string",
                      "documentation": "<p>The name identifying the role.</p>",
                      "serialized_name": "RoleName"
                    },
                    "role_id": {
                      "type": "string",
                      "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "RoleId"
                    },
                    "arn": {
                      "type": "string",
                      "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "Arn"
                    },
                    "create_date": {
                      "type": "timestamp",
                      "documentation": "<p>The date when the role was created.</p>",
                      "serialized_name": "CreateDate"
                    },
                    "assume_role_policy_document": {
                      "type": "string",
                      "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                      "serialized_name": "AssumeRolePolicyDocument"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_login_profile": {
      "name": "GetLoginProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves the user name and password create date for the specified user.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user whose login profile you want to retrieve.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetLoginProfile action.</p>",
        "members": {
          "login_profile": {
            "type": "structure",
            "documentation": "<p>User name and password create date for the user.</p>",
            "serialized_name": "LoginProfile",
            "members": {
              "user_name": {
                "type": "string",
                "documentation": "<p>The name of the user, which can be used for signing into the AWS Management Console.</p>",
                "serialized_name": "UserName"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the password for the user was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_role": {
      "name": "GetRole",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the policy granting permission to EC2 to assume the role. For more information about ARNs, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/Using_Identifiers.html#Identifiers_ARNs\">ARNs</a>. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to get information about.</p>",
            "serialized_name": "RoleName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetRole action.</p>",
        "members": {
          "role": {
            "type": "structure",
            "documentation": "<p>Information about the role.</p>",
            "serialized_name": "Role",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "role_name": {
                "type": "string",
                "documentation": "<p>The name identifying the role.</p>",
                "serialized_name": "RoleName"
              },
              "role_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "RoleId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the role was created.</p>",
                "serialized_name": "CreateDate"
              },
              "assume_role_policy_document": {
                "type": "string",
                "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                "serialized_name": "AssumeRolePolicyDocument"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_role_policy": {
      "name": "GetRolePolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves the specified policy document for the specified role. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role associated with the policy.</p>",
            "serialized_name": "RoleName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document to get.</p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetRolePolicy action.</p>",
        "members": {
          "role_name": {
            "type": "string",
            "documentation": "<p>The role the policy is associated with.</p>",
            "serialized_name": "RoleName"
          },
          "policy_name": {
            "type": "string",
            "documentation": "<p>The name of the policy.</p>",
            "serialized_name": "PolicyName"
          },
          "policy_document": {
            "type": "string",
            "documentation": "<p>The policy document.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_server_certificate": {
      "name": "GetServerCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves information about the specified server certificate.</p>",
      "input": {
        "type": "structure",
        "members": {
          "server_certificate_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the server certificate you want to retrieve information about.</p>",
            "serialized_name": "ServerCertificateName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetServerCertificate action.</p>",
        "members": {
          "server_certificate": {
            "type": "structure",
            "documentation": "<p>Information about the server certificate.</p>",
            "serialized_name": "ServerCertificate",
            "members": {
              "server_certificate_metadata": {
                "type": "structure",
                "documentation": "<p>The meta information of the server certificate, such as its name, path, ID, and ARN.</p>",
                "serialized_name": "ServerCertificateMetadata",
                "members": {
                  "path": {
                    "type": "string",
                    "documentation": "<p>Path to the server certificate. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                    "serialized_name": "Path"
                  },
                  "server_certificate_name": {
                    "type": "string",
                    "documentation": "<p>The name that identifies the server certificate.</p>",
                    "serialized_name": "ServerCertificateName"
                  },
                  "server_certificate_id": {
                    "type": "string",
                    "documentation": "<p>The stable and unique string identifying the server certificate. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                    "serialized_name": "ServerCertificateId"
                  },
                  "arn": {
                    "type": "string",
                    "documentation": "<p>The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                    "serialized_name": "Arn"
                  },
                  "upload_date": {
                    "type": "timestamp",
                    "documentation": "<p>The date when the server certificate was uploaded.</p>",
                    "serialized_name": "UploadDate"
                  }
                }
              },
              "certificate_body": {
                "type": "string",
                "documentation": "<p>The contents of the public key certificate.</p>",
                "serialized_name": "CertificateBody"
              },
              "certificate_chain": {
                "type": "string",
                "documentation": "<p>The contents of the public key certificate chain.</p>",
                "serialized_name": "CertificateChain"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_user": {
      "name": "GetUser",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves information about the specified user, including the user's path, GUID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS Access Key ID signing the request.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetUser action.</p>",
        "members": {
          "user": {
            "type": "structure",
            "documentation": "<p>Information about the user.</p>",
            "serialized_name": "User",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the user. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "user_name": {
                "type": "string",
                "documentation": "<p>The name identifying the user.</p>",
                "serialized_name": "UserName"
              },
              "user_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "UserId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the user. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "create_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the user was created.</p>",
                "serialized_name": "CreateDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "get_user_policy": {
      "name": "GetUserPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Retrieves the specified policy document for the specified user. The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user who the policy is associated with.</p>",
            "serialized_name": "UserName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document to get.</p>",
            "serialized_name": "PolicyName"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the GetUserPolicy action.</p>",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>The user the policy is associated with.</p>",
            "serialized_name": "UserName"
          },
          "policy_name": {
            "type": "string",
            "documentation": "<p>The name of the policy.</p>",
            "serialized_name": "PolicyName"
          },
          "policy_document": {
            "type": "string",
            "documentation": "<p>The policy document.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_access_keys": {
      "name": "ListAccessKeys",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Returns information about the Access Key IDs associated with the specified user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS Access Key ID used to sign the request. Because this action works for access keys under the AWS account, this API can be used to manage root credentials even if the AWS account has no associated users.</p> To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user.</p>",
            "serialized_name": "UserName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of keys you want in the response. If there are additional keys beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListAccessKeys action.</p>",
        "members": {
          "access_key_metadata": {
            "type": "list",
            "documentation": "<p>A list of access key metadata.</p>",
            "serialized_name": "AccessKeyMetadata",
            "members": {
              "type": "structure",
              "documentation": "<p>The AccessKey data type contains information about an AWS access key, without its secret key.</p> <p> This data type is used as a response element in the action ListAccessKeys. </p>",
              "members": {
                "user_name": {
                  "type": "string",
                  "documentation": "<p>Name of the user the key is associated with.</p>",
                  "serialized_name": "UserName"
                },
                "access_key_id": {
                  "type": "string",
                  "documentation": "<p>The ID for this access key.</p>",
                  "serialized_name": "AccessKeyId"
                },
                "status": {
                  "type": "string",
                  "documentation": "<p>The status of the access key. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>",
                  "serialized_name": "Status",
                  "enum": [
                    "Active",
                    "Inactive"
                  ]
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the access key was created.</p>",
                  "serialized_name": "CreateDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more keys to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more keys in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_account_aliases": {
      "name": "ListAccountAliases",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the account aliases associated with the account. For information about using an AWS account alias, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AccountAlias.html\" target=\"_blank\">Using an Alias for Your AWS Account ID</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of account aliases you want in the response. If there are additional account aliases beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListAccountAliases action.</p>",
        "members": {
          "account_aliases": {
            "type": "list",
            "documentation": "<p>A list of aliases associated with the account.</p>",
            "serialized_name": "AccountAliases",
            "members": {
              "type": "string"
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more account aliases to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more account aliases in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "list_group_policies": {
      "name": "ListGroupPolicies",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the names of the policies associated with the specified group. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the group to list policies for.</p>",
            "serialized_name": "GroupName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of policy names you want in the response. If there are additional policy names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListGroupPolicies action.</p>",
        "members": {
          "policy_names": {
            "type": "list",
            "documentation": "<p>A list of policy names.</p>",
            "serialized_name": "PolicyNames",
            "members": {
              "type": "string"
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more policy names to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more policy names in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_groups": {
      "name": "ListGroups",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the groups that have the specified path prefix.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path_prefix": {
            "type": "string",
            "documentation": "<p>The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups.</p>",
            "serialized_name": "PathPrefix"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of groups you want in the response. If there are additional groups beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListGroups action.</p>",
        "members": {
          "groups": {
            "type": "list",
            "documentation": "<p>A list of groups.</p>",
            "serialized_name": "Groups",
            "members": {
              "type": "structure",
              "documentation": "<p>The Group data type contains information about a group.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li>CreateGroup</li> <li>GetGroup</li> <li>ListGroups</li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the group. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "group_name": {
                  "type": "string",
                  "documentation": "<p>The name that identifies the group.</p>",
                  "serialized_name": "GroupName"
                },
                "group_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "GroupId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the group was created.</p>",
                  "serialized_name": "CreateDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more groups to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more groups in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "list_groups_for_user": {
      "name": "ListGroupsForUser",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the groups the specified user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the user to list groups for.</p>",
            "serialized_name": "UserName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of groups you want in the response. If there are additional groups beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListGroupsForUser action.</p>",
        "members": {
          "groups": {
            "type": "list",
            "documentation": "<p>A list of groups.</p>",
            "serialized_name": "Groups",
            "members": {
              "type": "structure",
              "documentation": "<p>The Group data type contains information about a group.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li>CreateGroup</li> <li>GetGroup</li> <li>ListGroups</li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the group. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "group_name": {
                  "type": "string",
                  "documentation": "<p>The name that identifies the group.</p>",
                  "serialized_name": "GroupName"
                },
                "group_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "GroupId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the group was created.</p>",
                  "serialized_name": "CreateDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more groups to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more groups in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_instance_profiles": {
      "name": "ListInstanceProfiles",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the instance profiles that have the specified path prefix. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path_prefix": {
            "type": "string",
            "documentation": "<p>The path prefix for filtering the results. For example: <code>/application_abc/component_xyz/</code>, which would get all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles.</p>",
            "serialized_name": "PathPrefix"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListInstanceProfiles action.</p>",
        "members": {
          "instance_profiles": {
            "type": "list",
            "documentation": "<p>A list of instance profiles.</p>",
            "serialized_name": "InstanceProfiles",
            "members": {
              "type": "structure",
              "documentation": "<p>The InstanceProfile data type contains information about an instance profile.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateInstanceProfile</p></li> <li><p>GetInstanceProfile</p></li> <li><p>ListInstanceProfiles</p></li> <li><p>ListInstanceProfilesForRole</p></li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the instance profile. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "instance_profile_name": {
                  "type": "string",
                  "documentation": "<p>The name identifying the instance profile.</p>",
                  "serialized_name": "InstanceProfileName"
                },
                "instance_profile_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the instance profile. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "InstanceProfileId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the instance profile was created.</p>",
                  "serialized_name": "CreateDate"
                },
                "roles": {
                  "type": "list",
                  "documentation": "<p>The role associated with the instance profile.</p>",
                  "serialized_name": "Roles",
                  "members": {
                    "type": "structure",
                    "documentation": "<p>The Role data type contains information about a role.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateRole</p></li> <li><p>GetRole</p></li> <li><p>ListRoles</p></li> </ul>",
                    "members": {
                      "path": {
                        "type": "string",
                        "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                        "serialized_name": "Path"
                      },
                      "role_name": {
                        "type": "string",
                        "documentation": "<p>The name identifying the role.</p>",
                        "serialized_name": "RoleName"
                      },
                      "role_id": {
                        "type": "string",
                        "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                        "serialized_name": "RoleId"
                      },
                      "arn": {
                        "type": "string",
                        "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                        "serialized_name": "Arn"
                      },
                      "create_date": {
                        "type": "timestamp",
                        "documentation": "<p>The date when the role was created.</p>",
                        "serialized_name": "CreateDate"
                      },
                      "assume_role_policy_document": {
                        "type": "string",
                        "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                        "serialized_name": "AssumeRolePolicyDocument"
                      }
                    }
                  }
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more instance profiles to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more instance profiles in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "list_instance_profiles_for_role": {
      "name": "ListInstanceProfilesForRole",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the instance profiles that have the specified associated role. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the role to list instance profiles for.</p>",
            "serialized_name": "RoleName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListInstanceProfilesForRole action.</p>",
        "members": {
          "instance_profiles": {
            "type": "list",
            "documentation": "<p>A list of instance profiles.</p>",
            "serialized_name": "InstanceProfiles",
            "members": {
              "type": "structure",
              "documentation": "<p>The InstanceProfile data type contains information about an instance profile.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateInstanceProfile</p></li> <li><p>GetInstanceProfile</p></li> <li><p>ListInstanceProfiles</p></li> <li><p>ListInstanceProfilesForRole</p></li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the instance profile. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "instance_profile_name": {
                  "type": "string",
                  "documentation": "<p>The name identifying the instance profile.</p>",
                  "serialized_name": "InstanceProfileName"
                },
                "instance_profile_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the instance profile. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "InstanceProfileId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the instance profile was created.</p>",
                  "serialized_name": "CreateDate"
                },
                "roles": {
                  "type": "list",
                  "documentation": "<p>The role associated with the instance profile.</p>",
                  "serialized_name": "Roles",
                  "members": {
                    "type": "structure",
                    "documentation": "<p>The Role data type contains information about a role.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateRole</p></li> <li><p>GetRole</p></li> <li><p>ListRoles</p></li> </ul>",
                    "members": {
                      "path": {
                        "type": "string",
                        "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                        "serialized_name": "Path"
                      },
                      "role_name": {
                        "type": "string",
                        "documentation": "<p>The name identifying the role.</p>",
                        "serialized_name": "RoleName"
                      },
                      "role_id": {
                        "type": "string",
                        "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                        "serialized_name": "RoleId"
                      },
                      "arn": {
                        "type": "string",
                        "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                        "serialized_name": "Arn"
                      },
                      "create_date": {
                        "type": "timestamp",
                        "documentation": "<p>The date when the role was created.</p>",
                        "serialized_name": "CreateDate"
                      },
                      "assume_role_policy_document": {
                        "type": "string",
                        "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                        "serialized_name": "AssumeRolePolicyDocument"
                      }
                    }
                  }
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more instance profiles to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more instance profiles in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_mfa_devices": {
      "name": "ListMFADevices",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the MFA devices. If the request includes the user name, then this action lists all the MFA devices associated with the specified user name. If you do not specify a user name, IAM determines the user name implicitly based on the AWS Access Key ID signing the request.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user whose MFA devices you want to list.</p>",
            "serialized_name": "UserName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of MFA devices you want in the response. If there are additional MFA devices beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListMFADevices action.</p>",
        "members": {
          "mfa_devices": {
            "type": "list",
            "documentation": "<p>A list of MFA devices.</p>",
            "serialized_name": "MFADevices",
            "members": {
              "type": "structure",
              "documentation": "<p>The <code>MFADevice</code> data type contains information about an MFA device.</p> <p> This data type is used as a response element in the action ListMFADevices. </p>",
              "members": {
                "user_name": {
                  "type": "string",
                  "documentation": "<p>The user with whom the MFA device is associated.</p>",
                  "serialized_name": "UserName"
                },
                "serial_number": {
                  "type": "string",
                  "documentation": "<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>",
                  "serialized_name": "SerialNumber"
                },
                "enable_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the MFA device was enabled for the user.</p>",
                  "serialized_name": "EnableDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more MFA devices to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more MFA devices in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_role_policies": {
      "name": "ListRolePolicies",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the names of the policies associated with the specified role. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the role to list policies for.</p>",
            "serialized_name": "RoleName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListRolePolicies action.</p>",
        "members": {
          "policy_names": {
            "type": "list",
            "documentation": "<p>A list of policy names.</p>",
            "serialized_name": "PolicyNames",
            "members": {
              "type": "string"
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more policy names to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more policy names in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_roles": {
      "name": "ListRoles",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the roles that have the specified path prefix. If there are none, the action returns an empty list. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path_prefix": {
            "type": "string",
            "documentation": "<p>The path prefix for filtering the results. For example: <code>/application_abc/component_xyz/</code>, which would get all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles.</p>",
            "serialized_name": "PathPrefix"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListRoles action.</p>",
        "members": {
          "roles": {
            "type": "list",
            "documentation": "<p>A list of roles.</p>",
            "serialized_name": "Roles",
            "members": {
              "type": "structure",
              "documentation": "<p>The Role data type contains information about a role.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateRole</p></li> <li><p>GetRole</p></li> <li><p>ListRoles</p></li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the role. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "role_name": {
                  "type": "string",
                  "documentation": "<p>The name identifying the role.</p>",
                  "serialized_name": "RoleName"
                },
                "role_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "RoleId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the role was created.</p>",
                  "serialized_name": "CreateDate"
                },
                "assume_role_policy_document": {
                  "type": "string",
                  "documentation": "<p>The policy that grants an entity permission to assume the role.</p> <p>The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to <a href=\"http://www.faqs.org/rfcs/rfc3986.html\">http://www.faqs.org/rfcs/rfc3986.html</a>.</p>",
                  "serialized_name": "AssumeRolePolicyDocument"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more roles to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more roles in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "list_server_certificates": {
      "name": "ListServerCertificates",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the server certificates that have the specified path prefix. If none exist, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path_prefix": {
            "type": "string",
            "documentation": "<p>The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates.</p>",
            "serialized_name": "PathPrefix"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of server certificates you want in the response. If there are additional server certificates beyond the maximum you specify, the <code>IsTruncated</code> response element will be set to <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListServerCertificates action.</p>",
        "members": {
          "server_certificate_metadata_list": {
            "type": "list",
            "documentation": "<p>A list of server certificates.</p>",
            "serialized_name": "ServerCertificateMetadataList",
            "members": {
              "type": "structure",
              "documentation": "<p>ServerCertificateMetadata contains information about a server certificate without its certificate body, certificate chain, and private key.</p> <p>This data type is used as a response element in the action UploadServerCertificate and ListServerCertificates.</p>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the server certificate. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "server_certificate_name": {
                  "type": "string",
                  "documentation": "<p>The name that identifies the server certificate.</p>",
                  "serialized_name": "ServerCertificateName"
                },
                "server_certificate_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the server certificate. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "ServerCertificateId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "upload_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the server certificate was uploaded.</p>",
                  "serialized_name": "UploadDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more server certificates to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more server certificates in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "list_signing_certificates": {
      "name": "ListSigningCertificates",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Returns information about the signing certificates associated with the specified user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS Access Key ID used to sign the request. Because this action works for access keys under the AWS account, this API can be used to manage root credentials even if the AWS account has no associated users.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>The name of the user.</p>",
            "serialized_name": "UserName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of certificate IDs you want in the response. If there are additional certificate IDs beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListSigningCertificates action.</p>",
        "members": {
          "certificates": {
            "type": "list",
            "documentation": "<p>A list of the user's signing certificate information.</p>",
            "serialized_name": "Certificates",
            "members": {
              "type": "structure",
              "documentation": "<p>The SigningCertificate data type contains information about an X.509 signing certificate.</p> <p> This data type is used as a response element in the actions UploadSigningCertificate and ListSigningCertificates. </p>",
              "members": {
                "user_name": {
                  "type": "string",
                  "documentation": "<p>Name of the user the signing certificate is associated with.</p>",
                  "serialized_name": "UserName"
                },
                "certificate_id": {
                  "type": "string",
                  "documentation": "<p>The ID for the signing certificate.</p>",
                  "serialized_name": "CertificateId"
                },
                "certificate_body": {
                  "type": "string",
                  "documentation": "<p>The contents of the signing certificate.</p>",
                  "serialized_name": "CertificateBody"
                },
                "status": {
                  "type": "string",
                  "documentation": "<p>The status of the signing certificate. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>",
                  "serialized_name": "Status",
                  "enum": [
                    "Active",
                    "Inactive"
                  ]
                },
                "upload_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the signing certificate was uploaded.</p>",
                  "serialized_name": "UploadDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more certificate IDs to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more certificates in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_user_policies": {
      "name": "ListUserPolicies",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the names of the policies associated with the specified user. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the user to list policies for.</p>",
            "serialized_name": "UserName"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this only when paginating results to indicate the maximum number of policy names you want in the response. If there are additional policy names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListUserPolicies action.</p>",
        "members": {
          "policy_names": {
            "type": "list",
            "documentation": "<p>A list of policy names.</p>",
            "serialized_name": "PolicyNames",
            "members": {
              "type": "string"
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more policy names to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more policy names in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "list_users": {
      "name": "ListUsers",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Lists the users that have the specified path prefix. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "path_prefix": {
            "type": "string",
            "documentation": "<p>The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names.</p>",
            "serialized_name": "PathPrefix"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListUsers action.</p>",
        "members": {
          "users": {
            "type": "list",
            "documentation": "<p>A list of users.</p>",
            "serialized_name": "Users",
            "members": {
              "type": "structure",
              "documentation": "<p>The User data type contains information about a user.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateUser</p></li> <li><p>GetUser</p></li> <li><p>ListUsers</p></li> </ul>",
              "members": {
                "path": {
                  "type": "string",
                  "documentation": "<p>Path to the user. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Path"
                },
                "user_name": {
                  "type": "string",
                  "documentation": "<p>The name identifying the user.</p>",
                  "serialized_name": "UserName"
                },
                "user_id": {
                  "type": "string",
                  "documentation": "<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "UserId"
                },
                "arn": {
                  "type": "string",
                  "documentation": "<p>The Amazon Resource Name (ARN) specifying the user. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                  "serialized_name": "Arn"
                },
                "create_date": {
                  "type": "timestamp",
                  "documentation": "<p>The date when the user was created.</p>",
                  "serialized_name": "CreateDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more user names to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more users in the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "list_virtual_mfa_devices": {
      "name": "ListVirtualMFADevices",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p> Lists the virtual MFA devices under the AWS account by assignment status. If you do not specify an assignment status, the action returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>. </p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>",
      "input": {
        "type": "structure",
        "members": {
          "assignment_status": {
            "type": "string",
            "documentation": "<p>The status (unassigned or assigned) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the action defaults to <code>Any</code> which lists both assigned and unassigned virtual MFA devices. </p>",
            "serialized_name": "AssignmentStatus",
            "enum": [
              "Assigned",
              "Unassigned",
              "Any"
            ]
          },
          "marker": {
            "type": "string",
            "documentation": "<p>Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the <code>Marker</code> element in the response you just received.</p>",
            "serialized_name": "Marker"
          },
          "max_items": {
            "type": "integer",
            "documentation": "<p>Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>. This parameter is optional. If you do not include it, it defaults to 100.</p>",
            "serialized_name": "MaxItems"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the ListVirtualMFADevices action.</p>",
        "members": {
          "virtual_mfa_devices": {
            "type": "list",
            "serialized_name": "VirtualMFADevices",
            "members": {
              "type": "structure",
              "documentation": "<p>The <code>VirtualMFADevice</code> data type contains information about a virtual MFA device.</p>",
              "members": {
                "serial_number": {
                  "type": "string",
                  "documentation": "<p>The serial number associated with <code>VirtualMFADevice</code>.</p>",
                  "serialized_name": "SerialNumber"
                },
                "base_32_string_seed": {
                  "type": "blob",
                  "documentation": "<p>The Base32 seed defined as specified in <a href=\"http://www.ietf.org/rfc/rfc3548.txt\" target=\"_blank\">RFC3548</a>. The <code>Base32StringSeed</code> is Base64-encoded.</p>",
                  "serialized_name": "Base32StringSeed"
                },
                "qr_code_png": {
                  "type": "blob",
                  "documentation": "<p>A QR code PNG image that encodes <i>otpauth://totp/$virtualMFADeviceName@$AccountName? secret=$Base32String</i> where $virtualMFADeviceName is one of the create call arguments, AccountName is the user name if set (accountId otherwise), and Base32String is the seed in Base32 format. The <code>Base32String</code> is Base64-encoded.</p>",
                  "serialized_name": "QRCodePNG"
                },
                "user": {
                  "type": "structure",
                  "documentation": "<p>The User data type contains information about a user.</p> <p> This data type is used as a response element in the following actions:</p> <ul> <li><p>CreateUser</p></li> <li><p>GetUser</p></li> <li><p>ListUsers</p></li> </ul>",
                  "serialized_name": "User",
                  "members": {
                    "path": {
                      "type": "string",
                      "documentation": "<p>Path to the user. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "Path"
                    },
                    "user_name": {
                      "type": "string",
                      "documentation": "<p>The name identifying the user.</p>",
                      "serialized_name": "UserName"
                    },
                    "user_id": {
                      "type": "string",
                      "documentation": "<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "UserId"
                    },
                    "arn": {
                      "type": "string",
                      "documentation": "<p>The Amazon Resource Name (ARN) specifying the user. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                      "serialized_name": "Arn"
                    },
                    "create_date": {
                      "type": "timestamp",
                      "documentation": "<p>The date when the user was created.</p>",
                      "serialized_name": "CreateDate"
                    }
                  }
                },
                "enable_date": {
                  "type": "timestamp",
                  "serialized_name": "EnableDate"
                }
              }
            }
          },
          "is_truncated": {
            "type": "boolean",
            "documentation": "<p>A flag that indicates whether there are more items to list. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items the list.</p>",
            "serialized_name": "IsTruncated"
          },
          "marker": {
            "type": "string",
            "documentation": "<p>If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>",
            "serialized_name": "Marker"
          }
        }
      }
    },
    "put_group_policy": {
      "name": "PutGroupPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Adds (or updates) a policy document associated with the specified group. For information about policies, refer to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?PoliciesOverview.html\" target=\"_blank\">Overview of Policies</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>For information about limits on the number of policies you can associate with a group, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html\" target=\"_blank\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\" target=\"_blank\">Making Query Requests</a> in <i>Using IAM</i>.",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group to associate the policy with.</p>",
            "serialized_name": "GroupName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document.</p>",
            "serialized_name": "PolicyName"
          },
          "policy_document": {
            "type": "string",
            "required": true,
            "documentation": "<p>The policy document.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "put_role_policy": {
      "name": "PutRolePolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Adds (or updates) a policy document associated with the specified role. For information about policies, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?PoliciesOverview.html\" target=\"_blank\">Overview of Policies</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>For information about limits on the policies you can associate with a role, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html\" target=\"_blank\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\" target=\"_blank\">Making Query Requests</a> in <i>Using IAM</i>.",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to associate the policy with.</p>",
            "serialized_name": "RoleName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document.</p>",
            "serialized_name": "PolicyName"
          },
          "policy_document": {
            "type": "string",
            "required": true,
            "documentation": "<p>The policy document.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "put_user_policy": {
      "name": "PutUserPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Adds (or updates) a policy document associated with the specified user. For information about policies, refer to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?PoliciesOverview.html\" target=\"_blank\">Overview of Policies</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>For information about limits on the number of policies you can associate with a user, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html\" target=\"_blank\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\" target=\"_blank\">Making Query Requests</a> in <i>Using IAM</i>.",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to associate the policy with.</p>",
            "serialized_name": "UserName"
          },
          "policy_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the policy document.</p>",
            "serialized_name": "PolicyName"
          },
          "policy_document": {
            "type": "string",
            "required": true,
            "documentation": "<p>The policy document.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "remove_role_from_instance_profile": {
      "name": "RemoveRoleFromInstanceProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Removes the specified role from the specified instance profile.</p> <important>Make sure you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance will break any applications running on the instance.</important> <p>For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For more information about instance profiles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "instance_profile_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the instance profile to update.</p>",
            "serialized_name": "InstanceProfileName"
          },
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to remove.</p>",
            "serialized_name": "RoleName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "remove_user_from_group": {
      "name": "RemoveUserFromGroup",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Removes the specified user from the specified group.</p>",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group to update.</p>",
            "serialized_name": "GroupName"
          },
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to remove.</p>",
            "serialized_name": "UserName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "resync_mfa_device": {
      "name": "ResyncMFADevice",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Synchronizes the specified MFA device with AWS servers.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user whose MFA device you want to resynchronize.</p>",
            "serialized_name": "UserName"
          },
          "serial_number": {
            "type": "string",
            "required": true,
            "documentation": "<p>Serial number that uniquely identifies the MFA device.</p>",
            "serialized_name": "SerialNumber"
          },
          "authentication_code_1": {
            "type": "string",
            "required": true,
            "documentation": "<p>An authentication code emitted by the device.</p>",
            "serialized_name": "AuthenticationCode1"
          },
          "authentication_code_2": {
            "type": "string",
            "required": true,
            "documentation": "<p>A subsequent authentication code emitted by the device.</p>",
            "serialized_name": "AuthenticationCode2"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the authentication code was not recognized. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_access_key": {
      "name": "UpdateAccessKey",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Changes the status of the specified access key from Active to Inactive, or vice versa. This action can be used to disable a user's key as part of a key rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS Access Key ID used to sign the request. Because this action works for access keys under the AWS account, this API can be used to manage root credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?ManagingCredentials.html\" target=\"_blank\">Managing Keys and Certificates</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user whose key you want to update.</p>",
            "serialized_name": "UserName"
          },
          "access_key_id": {
            "type": "string",
            "required": true,
            "documentation": "<p>The Access Key ID of the Secret Access Key you want to update.</p>",
            "serialized_name": "AccessKeyId"
          },
          "status": {
            "type": "string",
            "required": true,
            "documentation": "<p>The status you want to assign to the Secret Access Key. <code>Active</code> means the key can be used for API calls to AWS, while <code>Inactive</code> means the key cannot be used.</p>",
            "serialized_name": "Status",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_account_password_policy": {
      "name": "UpdateAccountPasswordPolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Updates the password policy settings for the account. For more information about using a password policy, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "minimum_password_length": {
            "type": "integer",
            "serialized_name": "MinimumPasswordLength"
          },
          "require_symbols": {
            "type": "boolean",
            "serialized_name": "RequireSymbols"
          },
          "require_numbers": {
            "type": "boolean",
            "serialized_name": "RequireNumbers"
          },
          "require_uppercase_characters": {
            "type": "boolean",
            "serialized_name": "RequireUppercaseCharacters"
          },
          "require_lowercase_characters": {
            "type": "boolean",
            "serialized_name": "RequireLowercaseCharacters"
          },
          "allow_users_to_change_password": {
            "type": "boolean",
            "serialized_name": "AllowUsersToChangePassword"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_assume_role_policy": {
      "name": "UpdateAssumeRolePolicy",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Updates the policy that grants an entity permission to assume a role. Currently, only an Amazon EC2 instance can assume a role. For more information about roles, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "role_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the role to update.</p>",
            "serialized_name": "RoleName"
          },
          "policy_document": {
            "type": "string",
            "required": true,
            "documentation": "<p>The policy that grants an entity permission to assume the role.</p>",
            "serialized_name": "PolicyDocument"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_group": {
      "name": "UpdateGroup",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Updates the name and/or the path of the specified group.</p> <important> You should understand the implications of changing a group's path or name. For more information, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Renaming.html\" target=\"_blank\">Renaming Users and Groups</a> in <i>Using AWS Identity and Access Management</i>. </important> To change a group name the requester must have appropriate permissions on both the source object and the target object. For example, to change Managers to MGRs, the entity making the request must have permission on Managers and MGRs, or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\" target=\"blank\">Permissions and Policies</a>.",
      "input": {
        "type": "structure",
        "members": {
          "group_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the group to update. If you're changing the name of the group, this is the original name.</p>",
            "serialized_name": "GroupName"
          },
          "new_path": {
            "type": "string",
            "documentation": "<p>New path for the group. Only include this if changing the group's path.</p>",
            "serialized_name": "NewPath"
          },
          "new_group_name": {
            "type": "string",
            "documentation": "<p>New name for the group. Only include this if changing the group's name.</p>",
            "serialized_name": "NewGroupName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_login_profile": {
      "name": "UpdateLoginProfile",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Changes the password for the specified user.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user whose password you want to update.</p>",
            "serialized_name": "UserName"
          },
          "password": {
            "type": "string",
            "required": true,
            "documentation": "<p>The new password for the user name.</p>",
            "serialized_name": "Password"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_server_certificate": {
      "name": "UpdateServerCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Updates the name and/or the path of the specified server certificate.</p> <important> You should understand the implications of changing a server certificate's path or name. For more information, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/ManagingServerCerts.html\" target=\"_blank\">Managing Server Certificates</a> in <i>Using AWS Identity and Access Management</i>. </important> To change a server certificate name the requester must have appropriate permissions on both the source object and the target object. For example, to change the name from ProductionCert to ProdCert, the entity making the request must have permission on ProductionCert and ProdCert, or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\" target=\"blank\">Permissions and Policies</a>.",
      "input": {
        "type": "structure",
        "members": {
          "server_certificate_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name of the server certificate that you want to update.</p>",
            "serialized_name": "ServerCertificateName"
          },
          "new_path": {
            "type": "string",
            "documentation": "<p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p>",
            "serialized_name": "NewPath"
          },
          "new_server_certificate_name": {
            "type": "string",
            "documentation": "<p>The new name for the server certificate. Include this only if you are updating the server certificate's name.</p>",
            "serialized_name": "NewServerCertificateName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_signing_certificate": {
      "name": "UpdateSigningCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Changes the status of the specified signing certificate from active to disabled, or vice versa. This action can be used to disable a user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS Access Key ID used to sign the request. Because this action works for access keys under the AWS account, this API can be used to manage root credentials even if the AWS account has no associated users.</p> <p>For information about rotating certificates, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?ManagingCredentials.html\" target=\"_blank\">Managing Keys and Certificates</a> in <i>Using AWS Identity and Access Management</i>.</p>",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user the signing certificate belongs to.</p>",
            "serialized_name": "UserName"
          },
          "certificate_id": {
            "type": "string",
            "required": true,
            "documentation": "<p>The ID of the signing certificate you want to update.</p>",
            "serialized_name": "CertificateId"
          },
          "status": {
            "type": "string",
            "required": true,
            "documentation": "<p>The status you want to assign to the certificate. <code>Active</code> means the certificate can be used for API calls to AWS, while <code>Inactive</code> means the certificate cannot be used.</p>",
            "serialized_name": "Status",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "update_user": {
      "name": "UpdateUser",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Updates the name and/or the path of the specified user.</p> <important> You should understand the implications of changing a user's path or name. For more information, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Renaming.html\" target=\"_blank\">Renaming Users and Groups</a> in <i>Using AWS Identity and Access Management</i>. </important> To change a user name the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\" target=\"blank\">Permissions and Policies</a>.",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p>",
            "serialized_name": "UserName"
          },
          "new_path": {
            "type": "string",
            "documentation": "<p>New path for the user. Include this parameter only if you're changing the user's path.</p>",
            "serialized_name": "NewPath"
          },
          "new_user_name": {
            "type": "string",
            "documentation": "<p>New name for the user. Include this parameter only if you're changing the user's name.</p>",
            "serialized_name": "NewUserName"
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "upload_server_certificate": {
      "name": "UploadServerCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>For information about the number of server certificates you can upload, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?LimitationsOnEntities.html\" target=\"_blank\">Limitations on IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html\" target=\"_blank\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\" target=\"_blank\">Making Query Requests</a> in <i>Using IAM</i>.",
      "input": {
        "type": "structure",
        "members": {
          "path": {
            "type": "string",
            "documentation": "<p>The path for the server certificate. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>",
            "serialized_name": "Path"
          },
          "server_certificate_name": {
            "type": "string",
            "required": true,
            "documentation": "<p>The name for the server certificate. Do not include the path in this value.</p>",
            "serialized_name": "ServerCertificateName"
          },
          "certificate_body": {
            "type": "string",
            "required": true,
            "documentation": "<p>The contents of the public key certificate in PEM-encoded format.</p>",
            "serialized_name": "CertificateBody"
          },
          "private_key": {
            "type": "string",
            "required": true,
            "documentation": "<p>The contents of the private key in PEM-encoded format.</p>",
            "serialized_name": "PrivateKey"
          },
          "certificate_chain": {
            "type": "string",
            "documentation": "<p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p>",
            "serialized_name": "CertificateChain"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the UploadServerCertificate action.</p>",
        "members": {
          "server_certificate_metadata": {
            "type": "structure",
            "documentation": "<p>The meta information of the uploaded server certificate without its certificate body, certificate chain, and private key.</p>",
            "serialized_name": "ServerCertificateMetadata",
            "members": {
              "path": {
                "type": "string",
                "documentation": "<p>Path to the server certificate. For more information about paths, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Path"
              },
              "server_certificate_name": {
                "type": "string",
                "documentation": "<p>The name that identifies the server certificate.</p>",
                "serialized_name": "ServerCertificateName"
              },
              "server_certificate_id": {
                "type": "string",
                "documentation": "<p>The stable and unique string identifying the server certificate. For more information about IDs, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "ServerCertificateId"
              },
              "arn": {
                "type": "string",
                "documentation": "<p>The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i>.</p>",
                "serialized_name": "Arn"
              },
              "upload_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the server certificate was uploaded.</p>",
                "serialized_name": "UploadDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the certificate was malformed or expired. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the public key certificate and the private key do not match.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    },
    "upload_signing_certificate": {
      "name": "UploadSigningCertificate",
      "http_method": "POST",
      "http_path": "/",
      "documentation": "<p>Uploads an X.509 signing certificate and associates it with the specified user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS Access Key ID used to sign the request. Because this action works for access keys under the AWS account, this API can be used to manage root credentials even if the AWS account has no associated users.</p> Because the body of a X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html\" target=\"_blank\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\" target=\"_blank\">Making Query Requests</a> in <i>Using IAM</i>.",
      "input": {
        "type": "structure",
        "members": {
          "user_name": {
            "type": "string",
            "documentation": "<p>Name of the user the signing certificate is for.</p>",
            "serialized_name": "UserName"
          },
          "certificate_body": {
            "type": "string",
            "required": true,
            "documentation": "<p>The contents of the signing certificate.</p>",
            "serialized_name": "CertificateBody"
          }
        }
      },
      "output": {
        "type": "structure",
        "documentation": "<p>Contains the result of a successful invocation of the UploadSigningCertificate action.</p>",
        "members": {
          "certificate": {
            "type": "structure",
            "documentation": "<p>Information about the certificate.</p>",
            "serialized_name": "Certificate",
            "members": {
              "user_name": {
                "type": "string",
                "documentation": "<p>Name of the user the signing certificate is associated with.</p>",
                "serialized_name": "UserName"
              },
              "certificate_id": {
                "type": "string",
                "documentation": "<p>The ID for the signing certificate.</p>",
                "serialized_name": "CertificateId"
              },
              "certificate_body": {
                "type": "string",
                "documentation": "<p>The contents of the signing certificate.</p>",
                "serialized_name": "CertificateBody"
              },
              "status": {
                "type": "string",
                "documentation": "<p>The status of the signing certificate. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>",
                "serialized_name": "Status",
                "enum": [
                  "Active",
                  "Inactive"
                ]
              },
              "upload_date": {
                "type": "timestamp",
                "documentation": "<p>The date when the signing certificate was uploaded.</p>",
                "serialized_name": "UploadDate"
              }
            }
          }
        }
      },
      "errors": [
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it attempted to create a resource that already exists.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the certificate was malformed or expired. The error message describes the specific error.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the certificate is invalid.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because the same certificate is associated to another user under the account.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        },
        {
          "type": "structure",
          "documentation": "<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>",
          "members": {
            "message": {
              "type": "string",
              "serialized_name": "message"
            }
          }
        }
      ]
    }
  }
}